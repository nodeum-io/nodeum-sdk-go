/*
 * Nodeum API Reference
 *
 * The Nodeum API makes it easy to tap into the digital data mesh that runs across your organisation. Make requests to our API endpoints and we’ll give you everything you need to interconnect your business workflows with your storage.  All production API requests are made to:  http://nodeumhostname/api/  The current production version of the API is v1.   **REST** The Nodeum API is a RESTful API. This means that the API is designed to allow you to get, create, update, & delete objects with the HTTP verbs GET, POST, PUT, PATCH, & DELETE.  **JSON** The Nodeum API speaks exclusively in JSON. This means that you should always set the Content-Type header to application/json to ensure that your requests are properly accepted and processed by the API.  **Authentication** All API calls require user-password authentication.   **Cross-Origin Resource Sharing** The Nodeum API supports CORS for communicating from Javascript for these endpoints. You will need to specify an Origin URI when creating your application to allow for CORS to be whitelisted for your domain.   **Pagination** Some endpoints such as File Listing return a potentially lengthy array of objects. In order to keep the response sizes manageable the API will take advantage of pagination. Pagination is a mechanism for returning a subset of the results for a request and allowing for subsequent requests to “page” through the rest of the results until the end is reached. Paginated endpoints follow a standard interface that accepts two query parameters, limit and offset, and return a payload that follows a standard form. These parameters names and their behavior are borrowed from SQL LIMIT and OFFSET keywords.  **Versioning** The Nodeum API is constantly being worked on to add features, make improvements, and fix bugs. This means that you should expect changes to be introduced and documented.   However, there are some changes or additions that are considered backwards-compatible and your applications should be flexible enough to handle them. These include:  - Adding new endpoints to the API - Adding new attributes to the response of an existing endpoint - Changing the order of attributes of responses (JSON by definition is an object of unordered key/value pairs)   **Filter parameters** When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)
 *
 * API version: 2.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package nodeum

import (
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ _context.Context
)

// FilesApiService FilesApi service
type FilesApiService service

// FilesChildrenOpts Optional parameters for the method 'FilesChildren'
type FilesChildrenOpts struct {
    Limit optional.Int32
    Offset optional.Int32
    FileId optional.String
    Name optional.String
    Type_ optional.String
    Permission optional.String
    Size optional.String
    ChangeDate optional.String
    ModificationDate optional.String
    AccessDate optional.String
    Gid optional.String
    Uid optional.String
}

/*
FilesChildren Lists files under a specific folder.
**API Key Scope**: files / index
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param fileParentId Numeric ID of parent folder.
 * @param optional nil or *FilesChildrenOpts - Optional Parameters:
 * @param "Limit" (optional.Int32) -  The number of items to display for pagination.
 * @param "Offset" (optional.Int32) -  The number of items to skip for pagination.
 * @param "FileId" (optional.String) -  Filter on file id
 * @param "Name" (optional.String) -  Filter on name
 * @param "Type_" (optional.String) -  Filter on type
 * @param "Permission" (optional.String) -  Filter on permission
 * @param "Size" (optional.String) -  Filter on size
 * @param "ChangeDate" (optional.String) -  Filter on change date
 * @param "ModificationDate" (optional.String) -  Filter on modification date
 * @param "AccessDate" (optional.String) -  Filter on access date
 * @param "Gid" (optional.String) -  Filter on gid
 * @param "Uid" (optional.String) -  Filter on uid
@return NodeumFileCollection
*/
func (a *FilesApiService) FilesChildren(ctx _context.Context, fileParentId int32, localVarOptionals *FilesChildrenOpts) (NodeumFileCollection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NodeumFileCollection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(ctx, "FilesApiService.FilesChildren")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/files/{file_parent_id}/children"
	localVarPath = strings.Replace(localVarPath, "{"+"file_parent_id"+"}", _neturl.QueryEscape(parameterToString(fileParentId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.Limit.IsSet() {
		localVarQueryParams.Add("limit", parameterToString(localVarOptionals.Limit.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FileId.IsSet() {
		localVarQueryParams.Add("file_id", parameterToString(localVarOptionals.FileId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Name.IsSet() {
		localVarQueryParams.Add("name", parameterToString(localVarOptionals.Name.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Type_.IsSet() {
		localVarQueryParams.Add("type", parameterToString(localVarOptionals.Type_.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Permission.IsSet() {
		localVarQueryParams.Add("permission", parameterToString(localVarOptionals.Permission.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Size.IsSet() {
		localVarQueryParams.Add("size", parameterToString(localVarOptionals.Size.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ChangeDate.IsSet() {
		localVarQueryParams.Add("change_date", parameterToString(localVarOptionals.ChangeDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ModificationDate.IsSet() {
		localVarQueryParams.Add("modification_date", parameterToString(localVarOptionals.ModificationDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AccessDate.IsSet() {
		localVarQueryParams.Add("access_date", parameterToString(localVarOptionals.AccessDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Gid.IsSet() {
		localVarQueryParams.Add("gid", parameterToString(localVarOptionals.Gid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Uid.IsSet() {
		localVarQueryParams.Add("uid", parameterToString(localVarOptionals.Uid.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if auth, ok := auth["Authorization"]; ok {
				var key string
				if auth.Prefix != "" {
					key = auth.Prefix + " " + auth.Key
				} else {
					key = auth.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v NodeumFileCollection
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// FilesChildrenByCloudPoolOpts Optional parameters for the method 'FilesChildrenByCloudPool'
type FilesChildrenByCloudPoolOpts struct {
    Limit optional.Int32
    Offset optional.Int32
    FileId optional.String
    Name optional.String
    Type_ optional.String
    Permission optional.String
    Size optional.String
    ChangeDate optional.String
    ModificationDate optional.String
    AccessDate optional.String
    Gid optional.String
    Uid optional.String
}

/*
FilesChildrenByCloudPool Lists files under a specific folder.
**API Key Scope**: files / index
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param cloudPoolId Numeric ID or name of cloud pool.
 * @param fileParentId Numeric ID of parent folder.
 * @param optional nil or *FilesChildrenByCloudPoolOpts - Optional Parameters:
 * @param "Limit" (optional.Int32) -  The number of items to display for pagination.
 * @param "Offset" (optional.Int32) -  The number of items to skip for pagination.
 * @param "FileId" (optional.String) -  Filter on file id
 * @param "Name" (optional.String) -  Filter on name
 * @param "Type_" (optional.String) -  Filter on type
 * @param "Permission" (optional.String) -  Filter on permission
 * @param "Size" (optional.String) -  Filter on size
 * @param "ChangeDate" (optional.String) -  Filter on change date
 * @param "ModificationDate" (optional.String) -  Filter on modification date
 * @param "AccessDate" (optional.String) -  Filter on access date
 * @param "Gid" (optional.String) -  Filter on gid
 * @param "Uid" (optional.String) -  Filter on uid
@return NodeumFileCollection
*/
func (a *FilesApiService) FilesChildrenByCloudPool(ctx _context.Context, cloudPoolId string, fileParentId int32, localVarOptionals *FilesChildrenByCloudPoolOpts) (NodeumFileCollection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NodeumFileCollection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(ctx, "FilesApiService.FilesChildrenByCloudPool")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cloud_pools/{cloud_pool_id}/files/{file_parent_id}/children"
	localVarPath = strings.Replace(localVarPath, "{"+"cloud_pool_id"+"}", _neturl.QueryEscape(parameterToString(cloudPoolId, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"file_parent_id"+"}", _neturl.QueryEscape(parameterToString(fileParentId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.Limit.IsSet() {
		localVarQueryParams.Add("limit", parameterToString(localVarOptionals.Limit.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FileId.IsSet() {
		localVarQueryParams.Add("file_id", parameterToString(localVarOptionals.FileId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Name.IsSet() {
		localVarQueryParams.Add("name", parameterToString(localVarOptionals.Name.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Type_.IsSet() {
		localVarQueryParams.Add("type", parameterToString(localVarOptionals.Type_.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Permission.IsSet() {
		localVarQueryParams.Add("permission", parameterToString(localVarOptionals.Permission.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Size.IsSet() {
		localVarQueryParams.Add("size", parameterToString(localVarOptionals.Size.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ChangeDate.IsSet() {
		localVarQueryParams.Add("change_date", parameterToString(localVarOptionals.ChangeDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ModificationDate.IsSet() {
		localVarQueryParams.Add("modification_date", parameterToString(localVarOptionals.ModificationDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AccessDate.IsSet() {
		localVarQueryParams.Add("access_date", parameterToString(localVarOptionals.AccessDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Gid.IsSet() {
		localVarQueryParams.Add("gid", parameterToString(localVarOptionals.Gid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Uid.IsSet() {
		localVarQueryParams.Add("uid", parameterToString(localVarOptionals.Uid.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if auth, ok := auth["Authorization"]; ok {
				var key string
				if auth.Prefix != "" {
					key = auth.Prefix + " " + auth.Key
				} else {
					key = auth.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v NodeumFileCollection
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// FilesChildrenByContainerOpts Optional parameters for the method 'FilesChildrenByContainer'
type FilesChildrenByContainerOpts struct {
    Limit optional.Int32
    Offset optional.Int32
    FileId optional.String
    Name optional.String
    Type_ optional.String
    Permission optional.String
    Size optional.String
    ChangeDate optional.String
    ModificationDate optional.String
    AccessDate optional.String
    Gid optional.String
    Uid optional.String
}

/*
FilesChildrenByContainer Lists files under a specific folder.
**API Key Scope**: files / index
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param containerId Numeric ID or name of container.
 * @param fileParentId Numeric ID of parent folder.
 * @param optional nil or *FilesChildrenByContainerOpts - Optional Parameters:
 * @param "Limit" (optional.Int32) -  The number of items to display for pagination.
 * @param "Offset" (optional.Int32) -  The number of items to skip for pagination.
 * @param "FileId" (optional.String) -  Filter on file id
 * @param "Name" (optional.String) -  Filter on name
 * @param "Type_" (optional.String) -  Filter on type
 * @param "Permission" (optional.String) -  Filter on permission
 * @param "Size" (optional.String) -  Filter on size
 * @param "ChangeDate" (optional.String) -  Filter on change date
 * @param "ModificationDate" (optional.String) -  Filter on modification date
 * @param "AccessDate" (optional.String) -  Filter on access date
 * @param "Gid" (optional.String) -  Filter on gid
 * @param "Uid" (optional.String) -  Filter on uid
@return NodeumFileCollection
*/
func (a *FilesApiService) FilesChildrenByContainer(ctx _context.Context, containerId string, fileParentId int32, localVarOptionals *FilesChildrenByContainerOpts) (NodeumFileCollection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NodeumFileCollection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(ctx, "FilesApiService.FilesChildrenByContainer")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/containers/{container_id}/files/{file_parent_id}/children"
	localVarPath = strings.Replace(localVarPath, "{"+"container_id"+"}", _neturl.QueryEscape(parameterToString(containerId, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"file_parent_id"+"}", _neturl.QueryEscape(parameterToString(fileParentId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.Limit.IsSet() {
		localVarQueryParams.Add("limit", parameterToString(localVarOptionals.Limit.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FileId.IsSet() {
		localVarQueryParams.Add("file_id", parameterToString(localVarOptionals.FileId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Name.IsSet() {
		localVarQueryParams.Add("name", parameterToString(localVarOptionals.Name.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Type_.IsSet() {
		localVarQueryParams.Add("type", parameterToString(localVarOptionals.Type_.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Permission.IsSet() {
		localVarQueryParams.Add("permission", parameterToString(localVarOptionals.Permission.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Size.IsSet() {
		localVarQueryParams.Add("size", parameterToString(localVarOptionals.Size.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ChangeDate.IsSet() {
		localVarQueryParams.Add("change_date", parameterToString(localVarOptionals.ChangeDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ModificationDate.IsSet() {
		localVarQueryParams.Add("modification_date", parameterToString(localVarOptionals.ModificationDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AccessDate.IsSet() {
		localVarQueryParams.Add("access_date", parameterToString(localVarOptionals.AccessDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Gid.IsSet() {
		localVarQueryParams.Add("gid", parameterToString(localVarOptionals.Gid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Uid.IsSet() {
		localVarQueryParams.Add("uid", parameterToString(localVarOptionals.Uid.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if auth, ok := auth["Authorization"]; ok {
				var key string
				if auth.Prefix != "" {
					key = auth.Prefix + " " + auth.Key
				} else {
					key = auth.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v NodeumFileCollection
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// FilesChildrenByNasPoolOpts Optional parameters for the method 'FilesChildrenByNasPool'
type FilesChildrenByNasPoolOpts struct {
    Limit optional.Int32
    Offset optional.Int32
    FileId optional.String
    Name optional.String
    Type_ optional.String
    Permission optional.String
    Size optional.String
    ChangeDate optional.String
    ModificationDate optional.String
    AccessDate optional.String
    Gid optional.String
    Uid optional.String
}

/*
FilesChildrenByNasPool Lists files under a specific folder.
**API Key Scope**: files / index
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param nasPoolId Numeric ID or name of NAS pool.
 * @param fileParentId Numeric ID of parent folder.
 * @param optional nil or *FilesChildrenByNasPoolOpts - Optional Parameters:
 * @param "Limit" (optional.Int32) -  The number of items to display for pagination.
 * @param "Offset" (optional.Int32) -  The number of items to skip for pagination.
 * @param "FileId" (optional.String) -  Filter on file id
 * @param "Name" (optional.String) -  Filter on name
 * @param "Type_" (optional.String) -  Filter on type
 * @param "Permission" (optional.String) -  Filter on permission
 * @param "Size" (optional.String) -  Filter on size
 * @param "ChangeDate" (optional.String) -  Filter on change date
 * @param "ModificationDate" (optional.String) -  Filter on modification date
 * @param "AccessDate" (optional.String) -  Filter on access date
 * @param "Gid" (optional.String) -  Filter on gid
 * @param "Uid" (optional.String) -  Filter on uid
@return NodeumFileCollection
*/
func (a *FilesApiService) FilesChildrenByNasPool(ctx _context.Context, nasPoolId string, fileParentId int32, localVarOptionals *FilesChildrenByNasPoolOpts) (NodeumFileCollection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NodeumFileCollection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(ctx, "FilesApiService.FilesChildrenByNasPool")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/nas_pools/{nas_pool_id}/files/{file_parent_id}/children"
	localVarPath = strings.Replace(localVarPath, "{"+"nas_pool_id"+"}", _neturl.QueryEscape(parameterToString(nasPoolId, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"file_parent_id"+"}", _neturl.QueryEscape(parameterToString(fileParentId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.Limit.IsSet() {
		localVarQueryParams.Add("limit", parameterToString(localVarOptionals.Limit.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FileId.IsSet() {
		localVarQueryParams.Add("file_id", parameterToString(localVarOptionals.FileId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Name.IsSet() {
		localVarQueryParams.Add("name", parameterToString(localVarOptionals.Name.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Type_.IsSet() {
		localVarQueryParams.Add("type", parameterToString(localVarOptionals.Type_.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Permission.IsSet() {
		localVarQueryParams.Add("permission", parameterToString(localVarOptionals.Permission.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Size.IsSet() {
		localVarQueryParams.Add("size", parameterToString(localVarOptionals.Size.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ChangeDate.IsSet() {
		localVarQueryParams.Add("change_date", parameterToString(localVarOptionals.ChangeDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ModificationDate.IsSet() {
		localVarQueryParams.Add("modification_date", parameterToString(localVarOptionals.ModificationDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AccessDate.IsSet() {
		localVarQueryParams.Add("access_date", parameterToString(localVarOptionals.AccessDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Gid.IsSet() {
		localVarQueryParams.Add("gid", parameterToString(localVarOptionals.Gid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Uid.IsSet() {
		localVarQueryParams.Add("uid", parameterToString(localVarOptionals.Uid.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if auth, ok := auth["Authorization"]; ok {
				var key string
				if auth.Prefix != "" {
					key = auth.Prefix + " " + auth.Key
				} else {
					key = auth.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v NodeumFileCollection
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// FilesChildrenByTapePoolOpts Optional parameters for the method 'FilesChildrenByTapePool'
type FilesChildrenByTapePoolOpts struct {
    Limit optional.Int32
    Offset optional.Int32
    FileId optional.String
    Name optional.String
    Type_ optional.String
    Permission optional.String
    Size optional.String
    ChangeDate optional.String
    ModificationDate optional.String
    AccessDate optional.String
    Gid optional.String
    Uid optional.String
}

/*
FilesChildrenByTapePool Lists files under a specific folder.
**API Key Scope**: files / index
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param tapePoolId Numeric ID, or name of tape pool.
 * @param fileParentId Numeric ID of parent folder.
 * @param optional nil or *FilesChildrenByTapePoolOpts - Optional Parameters:
 * @param "Limit" (optional.Int32) -  The number of items to display for pagination.
 * @param "Offset" (optional.Int32) -  The number of items to skip for pagination.
 * @param "FileId" (optional.String) -  Filter on file id
 * @param "Name" (optional.String) -  Filter on name
 * @param "Type_" (optional.String) -  Filter on type
 * @param "Permission" (optional.String) -  Filter on permission
 * @param "Size" (optional.String) -  Filter on size
 * @param "ChangeDate" (optional.String) -  Filter on change date
 * @param "ModificationDate" (optional.String) -  Filter on modification date
 * @param "AccessDate" (optional.String) -  Filter on access date
 * @param "Gid" (optional.String) -  Filter on gid
 * @param "Uid" (optional.String) -  Filter on uid
@return NodeumFileCollection
*/
func (a *FilesApiService) FilesChildrenByTapePool(ctx _context.Context, tapePoolId string, fileParentId int32, localVarOptionals *FilesChildrenByTapePoolOpts) (NodeumFileCollection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NodeumFileCollection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(ctx, "FilesApiService.FilesChildrenByTapePool")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/tape_pools/{tape_pool_id}/files/{file_parent_id}/children"
	localVarPath = strings.Replace(localVarPath, "{"+"tape_pool_id"+"}", _neturl.QueryEscape(parameterToString(tapePoolId, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"file_parent_id"+"}", _neturl.QueryEscape(parameterToString(fileParentId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.Limit.IsSet() {
		localVarQueryParams.Add("limit", parameterToString(localVarOptionals.Limit.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FileId.IsSet() {
		localVarQueryParams.Add("file_id", parameterToString(localVarOptionals.FileId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Name.IsSet() {
		localVarQueryParams.Add("name", parameterToString(localVarOptionals.Name.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Type_.IsSet() {
		localVarQueryParams.Add("type", parameterToString(localVarOptionals.Type_.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Permission.IsSet() {
		localVarQueryParams.Add("permission", parameterToString(localVarOptionals.Permission.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Size.IsSet() {
		localVarQueryParams.Add("size", parameterToString(localVarOptionals.Size.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ChangeDate.IsSet() {
		localVarQueryParams.Add("change_date", parameterToString(localVarOptionals.ChangeDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ModificationDate.IsSet() {
		localVarQueryParams.Add("modification_date", parameterToString(localVarOptionals.ModificationDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AccessDate.IsSet() {
		localVarQueryParams.Add("access_date", parameterToString(localVarOptionals.AccessDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Gid.IsSet() {
		localVarQueryParams.Add("gid", parameterToString(localVarOptionals.Gid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Uid.IsSet() {
		localVarQueryParams.Add("uid", parameterToString(localVarOptionals.Uid.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if auth, ok := auth["Authorization"]; ok {
				var key string
				if auth.Prefix != "" {
					key = auth.Prefix + " " + auth.Key
				} else {
					key = auth.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v NodeumFileCollection
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// FilesChildrenByTaskOpts Optional parameters for the method 'FilesChildrenByTask'
type FilesChildrenByTaskOpts struct {
    Limit optional.Int32
    Offset optional.Int32
    FileId optional.String
    Name optional.String
    Type_ optional.String
    Permission optional.String
    Size optional.String
    ChangeDate optional.String
    ModificationDate optional.String
    AccessDate optional.String
    Gid optional.String
    Uid optional.String
}

/*
FilesChildrenByTask Lists files under a specific folder.
**API Key Scope**: files / index
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param taskId Numeric ID or name of task. Task names are not unique, it's recommanded to use numeric ID.
 * @param fileParentId Numeric ID of parent folder.
 * @param optional nil or *FilesChildrenByTaskOpts - Optional Parameters:
 * @param "Limit" (optional.Int32) -  The number of items to display for pagination.
 * @param "Offset" (optional.Int32) -  The number of items to skip for pagination.
 * @param "FileId" (optional.String) -  Filter on file id
 * @param "Name" (optional.String) -  Filter on name
 * @param "Type_" (optional.String) -  Filter on type
 * @param "Permission" (optional.String) -  Filter on permission
 * @param "Size" (optional.String) -  Filter on size
 * @param "ChangeDate" (optional.String) -  Filter on change date
 * @param "ModificationDate" (optional.String) -  Filter on modification date
 * @param "AccessDate" (optional.String) -  Filter on access date
 * @param "Gid" (optional.String) -  Filter on gid
 * @param "Uid" (optional.String) -  Filter on uid
@return NodeumFileCollection
*/
func (a *FilesApiService) FilesChildrenByTask(ctx _context.Context, taskId string, fileParentId int32, localVarOptionals *FilesChildrenByTaskOpts) (NodeumFileCollection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NodeumFileCollection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(ctx, "FilesApiService.FilesChildrenByTask")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/tasks/{task_id}/files/{file_parent_id}/children"
	localVarPath = strings.Replace(localVarPath, "{"+"task_id"+"}", _neturl.QueryEscape(parameterToString(taskId, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"file_parent_id"+"}", _neturl.QueryEscape(parameterToString(fileParentId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.Limit.IsSet() {
		localVarQueryParams.Add("limit", parameterToString(localVarOptionals.Limit.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FileId.IsSet() {
		localVarQueryParams.Add("file_id", parameterToString(localVarOptionals.FileId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Name.IsSet() {
		localVarQueryParams.Add("name", parameterToString(localVarOptionals.Name.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Type_.IsSet() {
		localVarQueryParams.Add("type", parameterToString(localVarOptionals.Type_.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Permission.IsSet() {
		localVarQueryParams.Add("permission", parameterToString(localVarOptionals.Permission.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Size.IsSet() {
		localVarQueryParams.Add("size", parameterToString(localVarOptionals.Size.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ChangeDate.IsSet() {
		localVarQueryParams.Add("change_date", parameterToString(localVarOptionals.ChangeDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ModificationDate.IsSet() {
		localVarQueryParams.Add("modification_date", parameterToString(localVarOptionals.ModificationDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AccessDate.IsSet() {
		localVarQueryParams.Add("access_date", parameterToString(localVarOptionals.AccessDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Gid.IsSet() {
		localVarQueryParams.Add("gid", parameterToString(localVarOptionals.Gid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Uid.IsSet() {
		localVarQueryParams.Add("uid", parameterToString(localVarOptionals.Uid.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if auth, ok := auth["Authorization"]; ok {
				var key string
				if auth.Prefix != "" {
					key = auth.Prefix + " " + auth.Key
				} else {
					key = auth.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v NodeumFileCollection
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// FilesChildrenByTaskExecutionOpts Optional parameters for the method 'FilesChildrenByTaskExecution'
type FilesChildrenByTaskExecutionOpts struct {
    Limit optional.Int32
    Offset optional.Int32
    FileId optional.String
    Name optional.String
    Type_ optional.String
    Permission optional.String
    Size optional.String
    ChangeDate optional.String
    ModificationDate optional.String
    AccessDate optional.String
    Gid optional.String
    Uid optional.String
}

/*
FilesChildrenByTaskExecution Lists files under a specific folder.
**API Key Scope**: files / index
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param taskExecutionId Numeric ID of task execution.
 * @param fileParentId Numeric ID of parent folder.
 * @param optional nil or *FilesChildrenByTaskExecutionOpts - Optional Parameters:
 * @param "Limit" (optional.Int32) -  The number of items to display for pagination.
 * @param "Offset" (optional.Int32) -  The number of items to skip for pagination.
 * @param "FileId" (optional.String) -  Filter on file id
 * @param "Name" (optional.String) -  Filter on name
 * @param "Type_" (optional.String) -  Filter on type
 * @param "Permission" (optional.String) -  Filter on permission
 * @param "Size" (optional.String) -  Filter on size
 * @param "ChangeDate" (optional.String) -  Filter on change date
 * @param "ModificationDate" (optional.String) -  Filter on modification date
 * @param "AccessDate" (optional.String) -  Filter on access date
 * @param "Gid" (optional.String) -  Filter on gid
 * @param "Uid" (optional.String) -  Filter on uid
@return NodeumFileCollection
*/
func (a *FilesApiService) FilesChildrenByTaskExecution(ctx _context.Context, taskExecutionId int64, fileParentId int32, localVarOptionals *FilesChildrenByTaskExecutionOpts) (NodeumFileCollection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NodeumFileCollection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(ctx, "FilesApiService.FilesChildrenByTaskExecution")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/task_executions/{task_execution_id}/files/{file_parent_id}/children"
	localVarPath = strings.Replace(localVarPath, "{"+"task_execution_id"+"}", _neturl.QueryEscape(parameterToString(taskExecutionId, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"file_parent_id"+"}", _neturl.QueryEscape(parameterToString(fileParentId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.Limit.IsSet() {
		localVarQueryParams.Add("limit", parameterToString(localVarOptionals.Limit.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FileId.IsSet() {
		localVarQueryParams.Add("file_id", parameterToString(localVarOptionals.FileId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Name.IsSet() {
		localVarQueryParams.Add("name", parameterToString(localVarOptionals.Name.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Type_.IsSet() {
		localVarQueryParams.Add("type", parameterToString(localVarOptionals.Type_.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Permission.IsSet() {
		localVarQueryParams.Add("permission", parameterToString(localVarOptionals.Permission.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Size.IsSet() {
		localVarQueryParams.Add("size", parameterToString(localVarOptionals.Size.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ChangeDate.IsSet() {
		localVarQueryParams.Add("change_date", parameterToString(localVarOptionals.ChangeDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ModificationDate.IsSet() {
		localVarQueryParams.Add("modification_date", parameterToString(localVarOptionals.ModificationDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AccessDate.IsSet() {
		localVarQueryParams.Add("access_date", parameterToString(localVarOptionals.AccessDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Gid.IsSet() {
		localVarQueryParams.Add("gid", parameterToString(localVarOptionals.Gid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Uid.IsSet() {
		localVarQueryParams.Add("uid", parameterToString(localVarOptionals.Uid.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if auth, ok := auth["Authorization"]; ok {
				var key string
				if auth.Prefix != "" {
					key = auth.Prefix + " " + auth.Key
				} else {
					key = auth.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v NodeumFileCollection
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// FilesChildrenByTaskExecutionByTaskOpts Optional parameters for the method 'FilesChildrenByTaskExecutionByTask'
type FilesChildrenByTaskExecutionByTaskOpts struct {
    Limit optional.Int32
    Offset optional.Int32
    FileId optional.String
    Name optional.String
    Type_ optional.String
    Permission optional.String
    Size optional.String
    ChangeDate optional.String
    ModificationDate optional.String
    AccessDate optional.String
    Gid optional.String
    Uid optional.String
}

/*
FilesChildrenByTaskExecutionByTask Lists files under a specific folder.
**API Key Scope**: files / index
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param taskId Numeric ID or name of task. Task names are not unique, it's recommanded to use numeric ID.
 * @param taskExecutionId Numeric ID of task execution.
 * @param fileParentId Numeric ID of parent folder.
 * @param optional nil or *FilesChildrenByTaskExecutionByTaskOpts - Optional Parameters:
 * @param "Limit" (optional.Int32) -  The number of items to display for pagination.
 * @param "Offset" (optional.Int32) -  The number of items to skip for pagination.
 * @param "FileId" (optional.String) -  Filter on file id
 * @param "Name" (optional.String) -  Filter on name
 * @param "Type_" (optional.String) -  Filter on type
 * @param "Permission" (optional.String) -  Filter on permission
 * @param "Size" (optional.String) -  Filter on size
 * @param "ChangeDate" (optional.String) -  Filter on change date
 * @param "ModificationDate" (optional.String) -  Filter on modification date
 * @param "AccessDate" (optional.String) -  Filter on access date
 * @param "Gid" (optional.String) -  Filter on gid
 * @param "Uid" (optional.String) -  Filter on uid
@return NodeumFileCollection
*/
func (a *FilesApiService) FilesChildrenByTaskExecutionByTask(ctx _context.Context, taskId string, taskExecutionId int64, fileParentId int32, localVarOptionals *FilesChildrenByTaskExecutionByTaskOpts) (NodeumFileCollection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NodeumFileCollection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(ctx, "FilesApiService.FilesChildrenByTaskExecutionByTask")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/tasks/{task_id}/task_executions/{task_execution_id}/files/{file_parent_id}/children"
	localVarPath = strings.Replace(localVarPath, "{"+"task_id"+"}", _neturl.QueryEscape(parameterToString(taskId, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"task_execution_id"+"}", _neturl.QueryEscape(parameterToString(taskExecutionId, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"file_parent_id"+"}", _neturl.QueryEscape(parameterToString(fileParentId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.Limit.IsSet() {
		localVarQueryParams.Add("limit", parameterToString(localVarOptionals.Limit.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FileId.IsSet() {
		localVarQueryParams.Add("file_id", parameterToString(localVarOptionals.FileId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Name.IsSet() {
		localVarQueryParams.Add("name", parameterToString(localVarOptionals.Name.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Type_.IsSet() {
		localVarQueryParams.Add("type", parameterToString(localVarOptionals.Type_.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Permission.IsSet() {
		localVarQueryParams.Add("permission", parameterToString(localVarOptionals.Permission.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Size.IsSet() {
		localVarQueryParams.Add("size", parameterToString(localVarOptionals.Size.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ChangeDate.IsSet() {
		localVarQueryParams.Add("change_date", parameterToString(localVarOptionals.ChangeDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ModificationDate.IsSet() {
		localVarQueryParams.Add("modification_date", parameterToString(localVarOptionals.ModificationDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AccessDate.IsSet() {
		localVarQueryParams.Add("access_date", parameterToString(localVarOptionals.AccessDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Gid.IsSet() {
		localVarQueryParams.Add("gid", parameterToString(localVarOptionals.Gid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Uid.IsSet() {
		localVarQueryParams.Add("uid", parameterToString(localVarOptionals.Uid.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if auth, ok := auth["Authorization"]; ok {
				var key string
				if auth.Prefix != "" {
					key = auth.Prefix + " " + auth.Key
				} else {
					key = auth.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v NodeumFileCollection
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// IndexFilesOpts Optional parameters for the method 'IndexFiles'
type IndexFilesOpts struct {
    Limit optional.Int32
    Offset optional.Int32
    FileId optional.String
    Name optional.String
    Type_ optional.String
    Permission optional.String
    Size optional.String
    ChangeDate optional.String
    ModificationDate optional.String
    AccessDate optional.String
    Gid optional.String
    Uid optional.String
}

/*
IndexFiles Lists files on root.
**API Key Scope**: files / index
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *IndexFilesOpts - Optional Parameters:
 * @param "Limit" (optional.Int32) -  The number of items to display for pagination.
 * @param "Offset" (optional.Int32) -  The number of items to skip for pagination.
 * @param "FileId" (optional.String) -  Filter on file id
 * @param "Name" (optional.String) -  Filter on name
 * @param "Type_" (optional.String) -  Filter on type
 * @param "Permission" (optional.String) -  Filter on permission
 * @param "Size" (optional.String) -  Filter on size
 * @param "ChangeDate" (optional.String) -  Filter on change date
 * @param "ModificationDate" (optional.String) -  Filter on modification date
 * @param "AccessDate" (optional.String) -  Filter on access date
 * @param "Gid" (optional.String) -  Filter on gid
 * @param "Uid" (optional.String) -  Filter on uid
@return NodeumFileCollection
*/
func (a *FilesApiService) IndexFiles(ctx _context.Context, localVarOptionals *IndexFilesOpts) (NodeumFileCollection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NodeumFileCollection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(ctx, "FilesApiService.IndexFiles")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/files"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.Limit.IsSet() {
		localVarQueryParams.Add("limit", parameterToString(localVarOptionals.Limit.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FileId.IsSet() {
		localVarQueryParams.Add("file_id", parameterToString(localVarOptionals.FileId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Name.IsSet() {
		localVarQueryParams.Add("name", parameterToString(localVarOptionals.Name.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Type_.IsSet() {
		localVarQueryParams.Add("type", parameterToString(localVarOptionals.Type_.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Permission.IsSet() {
		localVarQueryParams.Add("permission", parameterToString(localVarOptionals.Permission.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Size.IsSet() {
		localVarQueryParams.Add("size", parameterToString(localVarOptionals.Size.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ChangeDate.IsSet() {
		localVarQueryParams.Add("change_date", parameterToString(localVarOptionals.ChangeDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ModificationDate.IsSet() {
		localVarQueryParams.Add("modification_date", parameterToString(localVarOptionals.ModificationDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AccessDate.IsSet() {
		localVarQueryParams.Add("access_date", parameterToString(localVarOptionals.AccessDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Gid.IsSet() {
		localVarQueryParams.Add("gid", parameterToString(localVarOptionals.Gid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Uid.IsSet() {
		localVarQueryParams.Add("uid", parameterToString(localVarOptionals.Uid.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if auth, ok := auth["Authorization"]; ok {
				var key string
				if auth.Prefix != "" {
					key = auth.Prefix + " " + auth.Key
				} else {
					key = auth.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v NodeumFileCollection
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// IndexFilesByCloudPoolOpts Optional parameters for the method 'IndexFilesByCloudPool'
type IndexFilesByCloudPoolOpts struct {
    Limit optional.Int32
    Offset optional.Int32
    FileId optional.String
    Name optional.String
    Type_ optional.String
    Permission optional.String
    Size optional.String
    ChangeDate optional.String
    ModificationDate optional.String
    AccessDate optional.String
    Gid optional.String
    Uid optional.String
}

/*
IndexFilesByCloudPool Lists files on root.
**API Key Scope**: files / index
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param cloudPoolId Numeric ID or name of cloud pool.
 * @param optional nil or *IndexFilesByCloudPoolOpts - Optional Parameters:
 * @param "Limit" (optional.Int32) -  The number of items to display for pagination.
 * @param "Offset" (optional.Int32) -  The number of items to skip for pagination.
 * @param "FileId" (optional.String) -  Filter on file id
 * @param "Name" (optional.String) -  Filter on name
 * @param "Type_" (optional.String) -  Filter on type
 * @param "Permission" (optional.String) -  Filter on permission
 * @param "Size" (optional.String) -  Filter on size
 * @param "ChangeDate" (optional.String) -  Filter on change date
 * @param "ModificationDate" (optional.String) -  Filter on modification date
 * @param "AccessDate" (optional.String) -  Filter on access date
 * @param "Gid" (optional.String) -  Filter on gid
 * @param "Uid" (optional.String) -  Filter on uid
@return NodeumFileCollection
*/
func (a *FilesApiService) IndexFilesByCloudPool(ctx _context.Context, cloudPoolId string, localVarOptionals *IndexFilesByCloudPoolOpts) (NodeumFileCollection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NodeumFileCollection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(ctx, "FilesApiService.IndexFilesByCloudPool")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cloud_pools/{cloud_pool_id}/files"
	localVarPath = strings.Replace(localVarPath, "{"+"cloud_pool_id"+"}", _neturl.QueryEscape(parameterToString(cloudPoolId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.Limit.IsSet() {
		localVarQueryParams.Add("limit", parameterToString(localVarOptionals.Limit.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FileId.IsSet() {
		localVarQueryParams.Add("file_id", parameterToString(localVarOptionals.FileId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Name.IsSet() {
		localVarQueryParams.Add("name", parameterToString(localVarOptionals.Name.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Type_.IsSet() {
		localVarQueryParams.Add("type", parameterToString(localVarOptionals.Type_.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Permission.IsSet() {
		localVarQueryParams.Add("permission", parameterToString(localVarOptionals.Permission.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Size.IsSet() {
		localVarQueryParams.Add("size", parameterToString(localVarOptionals.Size.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ChangeDate.IsSet() {
		localVarQueryParams.Add("change_date", parameterToString(localVarOptionals.ChangeDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ModificationDate.IsSet() {
		localVarQueryParams.Add("modification_date", parameterToString(localVarOptionals.ModificationDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AccessDate.IsSet() {
		localVarQueryParams.Add("access_date", parameterToString(localVarOptionals.AccessDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Gid.IsSet() {
		localVarQueryParams.Add("gid", parameterToString(localVarOptionals.Gid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Uid.IsSet() {
		localVarQueryParams.Add("uid", parameterToString(localVarOptionals.Uid.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if auth, ok := auth["Authorization"]; ok {
				var key string
				if auth.Prefix != "" {
					key = auth.Prefix + " " + auth.Key
				} else {
					key = auth.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v NodeumFileCollection
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// IndexFilesByContainerOpts Optional parameters for the method 'IndexFilesByContainer'
type IndexFilesByContainerOpts struct {
    Limit optional.Int32
    Offset optional.Int32
    FileId optional.String
    Name optional.String
    Type_ optional.String
    Permission optional.String
    Size optional.String
    ChangeDate optional.String
    ModificationDate optional.String
    AccessDate optional.String
    Gid optional.String
    Uid optional.String
}

/*
IndexFilesByContainer Lists files on root.
**API Key Scope**: files / index
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param containerId Numeric ID or name of container.
 * @param optional nil or *IndexFilesByContainerOpts - Optional Parameters:
 * @param "Limit" (optional.Int32) -  The number of items to display for pagination.
 * @param "Offset" (optional.Int32) -  The number of items to skip for pagination.
 * @param "FileId" (optional.String) -  Filter on file id
 * @param "Name" (optional.String) -  Filter on name
 * @param "Type_" (optional.String) -  Filter on type
 * @param "Permission" (optional.String) -  Filter on permission
 * @param "Size" (optional.String) -  Filter on size
 * @param "ChangeDate" (optional.String) -  Filter on change date
 * @param "ModificationDate" (optional.String) -  Filter on modification date
 * @param "AccessDate" (optional.String) -  Filter on access date
 * @param "Gid" (optional.String) -  Filter on gid
 * @param "Uid" (optional.String) -  Filter on uid
@return NodeumFileCollection
*/
func (a *FilesApiService) IndexFilesByContainer(ctx _context.Context, containerId string, localVarOptionals *IndexFilesByContainerOpts) (NodeumFileCollection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NodeumFileCollection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(ctx, "FilesApiService.IndexFilesByContainer")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/containers/{container_id}/files"
	localVarPath = strings.Replace(localVarPath, "{"+"container_id"+"}", _neturl.QueryEscape(parameterToString(containerId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.Limit.IsSet() {
		localVarQueryParams.Add("limit", parameterToString(localVarOptionals.Limit.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FileId.IsSet() {
		localVarQueryParams.Add("file_id", parameterToString(localVarOptionals.FileId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Name.IsSet() {
		localVarQueryParams.Add("name", parameterToString(localVarOptionals.Name.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Type_.IsSet() {
		localVarQueryParams.Add("type", parameterToString(localVarOptionals.Type_.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Permission.IsSet() {
		localVarQueryParams.Add("permission", parameterToString(localVarOptionals.Permission.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Size.IsSet() {
		localVarQueryParams.Add("size", parameterToString(localVarOptionals.Size.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ChangeDate.IsSet() {
		localVarQueryParams.Add("change_date", parameterToString(localVarOptionals.ChangeDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ModificationDate.IsSet() {
		localVarQueryParams.Add("modification_date", parameterToString(localVarOptionals.ModificationDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AccessDate.IsSet() {
		localVarQueryParams.Add("access_date", parameterToString(localVarOptionals.AccessDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Gid.IsSet() {
		localVarQueryParams.Add("gid", parameterToString(localVarOptionals.Gid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Uid.IsSet() {
		localVarQueryParams.Add("uid", parameterToString(localVarOptionals.Uid.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if auth, ok := auth["Authorization"]; ok {
				var key string
				if auth.Prefix != "" {
					key = auth.Prefix + " " + auth.Key
				} else {
					key = auth.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v NodeumFileCollection
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// IndexFilesByNasPoolOpts Optional parameters for the method 'IndexFilesByNasPool'
type IndexFilesByNasPoolOpts struct {
    Limit optional.Int32
    Offset optional.Int32
    FileId optional.String
    Name optional.String
    Type_ optional.String
    Permission optional.String
    Size optional.String
    ChangeDate optional.String
    ModificationDate optional.String
    AccessDate optional.String
    Gid optional.String
    Uid optional.String
}

/*
IndexFilesByNasPool Lists files on root.
**API Key Scope**: files / index
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param nasPoolId Numeric ID or name of NAS pool.
 * @param optional nil or *IndexFilesByNasPoolOpts - Optional Parameters:
 * @param "Limit" (optional.Int32) -  The number of items to display for pagination.
 * @param "Offset" (optional.Int32) -  The number of items to skip for pagination.
 * @param "FileId" (optional.String) -  Filter on file id
 * @param "Name" (optional.String) -  Filter on name
 * @param "Type_" (optional.String) -  Filter on type
 * @param "Permission" (optional.String) -  Filter on permission
 * @param "Size" (optional.String) -  Filter on size
 * @param "ChangeDate" (optional.String) -  Filter on change date
 * @param "ModificationDate" (optional.String) -  Filter on modification date
 * @param "AccessDate" (optional.String) -  Filter on access date
 * @param "Gid" (optional.String) -  Filter on gid
 * @param "Uid" (optional.String) -  Filter on uid
@return NodeumFileCollection
*/
func (a *FilesApiService) IndexFilesByNasPool(ctx _context.Context, nasPoolId string, localVarOptionals *IndexFilesByNasPoolOpts) (NodeumFileCollection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NodeumFileCollection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(ctx, "FilesApiService.IndexFilesByNasPool")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/nas_pools/{nas_pool_id}/files"
	localVarPath = strings.Replace(localVarPath, "{"+"nas_pool_id"+"}", _neturl.QueryEscape(parameterToString(nasPoolId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.Limit.IsSet() {
		localVarQueryParams.Add("limit", parameterToString(localVarOptionals.Limit.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FileId.IsSet() {
		localVarQueryParams.Add("file_id", parameterToString(localVarOptionals.FileId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Name.IsSet() {
		localVarQueryParams.Add("name", parameterToString(localVarOptionals.Name.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Type_.IsSet() {
		localVarQueryParams.Add("type", parameterToString(localVarOptionals.Type_.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Permission.IsSet() {
		localVarQueryParams.Add("permission", parameterToString(localVarOptionals.Permission.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Size.IsSet() {
		localVarQueryParams.Add("size", parameterToString(localVarOptionals.Size.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ChangeDate.IsSet() {
		localVarQueryParams.Add("change_date", parameterToString(localVarOptionals.ChangeDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ModificationDate.IsSet() {
		localVarQueryParams.Add("modification_date", parameterToString(localVarOptionals.ModificationDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AccessDate.IsSet() {
		localVarQueryParams.Add("access_date", parameterToString(localVarOptionals.AccessDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Gid.IsSet() {
		localVarQueryParams.Add("gid", parameterToString(localVarOptionals.Gid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Uid.IsSet() {
		localVarQueryParams.Add("uid", parameterToString(localVarOptionals.Uid.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if auth, ok := auth["Authorization"]; ok {
				var key string
				if auth.Prefix != "" {
					key = auth.Prefix + " " + auth.Key
				} else {
					key = auth.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v NodeumFileCollection
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// IndexFilesByTapePoolOpts Optional parameters for the method 'IndexFilesByTapePool'
type IndexFilesByTapePoolOpts struct {
    Limit optional.Int32
    Offset optional.Int32
    FileId optional.String
    Name optional.String
    Type_ optional.String
    Permission optional.String
    Size optional.String
    ChangeDate optional.String
    ModificationDate optional.String
    AccessDate optional.String
    Gid optional.String
    Uid optional.String
}

/*
IndexFilesByTapePool Lists files on root.
**API Key Scope**: files / index
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param tapePoolId Numeric ID, or name of tape pool.
 * @param optional nil or *IndexFilesByTapePoolOpts - Optional Parameters:
 * @param "Limit" (optional.Int32) -  The number of items to display for pagination.
 * @param "Offset" (optional.Int32) -  The number of items to skip for pagination.
 * @param "FileId" (optional.String) -  Filter on file id
 * @param "Name" (optional.String) -  Filter on name
 * @param "Type_" (optional.String) -  Filter on type
 * @param "Permission" (optional.String) -  Filter on permission
 * @param "Size" (optional.String) -  Filter on size
 * @param "ChangeDate" (optional.String) -  Filter on change date
 * @param "ModificationDate" (optional.String) -  Filter on modification date
 * @param "AccessDate" (optional.String) -  Filter on access date
 * @param "Gid" (optional.String) -  Filter on gid
 * @param "Uid" (optional.String) -  Filter on uid
@return NodeumFileCollection
*/
func (a *FilesApiService) IndexFilesByTapePool(ctx _context.Context, tapePoolId string, localVarOptionals *IndexFilesByTapePoolOpts) (NodeumFileCollection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NodeumFileCollection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(ctx, "FilesApiService.IndexFilesByTapePool")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/tape_pools/{tape_pool_id}/files"
	localVarPath = strings.Replace(localVarPath, "{"+"tape_pool_id"+"}", _neturl.QueryEscape(parameterToString(tapePoolId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.Limit.IsSet() {
		localVarQueryParams.Add("limit", parameterToString(localVarOptionals.Limit.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FileId.IsSet() {
		localVarQueryParams.Add("file_id", parameterToString(localVarOptionals.FileId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Name.IsSet() {
		localVarQueryParams.Add("name", parameterToString(localVarOptionals.Name.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Type_.IsSet() {
		localVarQueryParams.Add("type", parameterToString(localVarOptionals.Type_.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Permission.IsSet() {
		localVarQueryParams.Add("permission", parameterToString(localVarOptionals.Permission.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Size.IsSet() {
		localVarQueryParams.Add("size", parameterToString(localVarOptionals.Size.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ChangeDate.IsSet() {
		localVarQueryParams.Add("change_date", parameterToString(localVarOptionals.ChangeDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ModificationDate.IsSet() {
		localVarQueryParams.Add("modification_date", parameterToString(localVarOptionals.ModificationDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AccessDate.IsSet() {
		localVarQueryParams.Add("access_date", parameterToString(localVarOptionals.AccessDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Gid.IsSet() {
		localVarQueryParams.Add("gid", parameterToString(localVarOptionals.Gid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Uid.IsSet() {
		localVarQueryParams.Add("uid", parameterToString(localVarOptionals.Uid.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if auth, ok := auth["Authorization"]; ok {
				var key string
				if auth.Prefix != "" {
					key = auth.Prefix + " " + auth.Key
				} else {
					key = auth.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v NodeumFileCollection
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// IndexFilesByTaskOpts Optional parameters for the method 'IndexFilesByTask'
type IndexFilesByTaskOpts struct {
    Limit optional.Int32
    Offset optional.Int32
    FileId optional.String
    Name optional.String
    Type_ optional.String
    Permission optional.String
    Size optional.String
    ChangeDate optional.String
    ModificationDate optional.String
    AccessDate optional.String
    Gid optional.String
    Uid optional.String
}

/*
IndexFilesByTask Lists files on root.
**API Key Scope**: files / index
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param taskId Numeric ID or name of task. Task names are not unique, it's recommanded to use numeric ID.
 * @param optional nil or *IndexFilesByTaskOpts - Optional Parameters:
 * @param "Limit" (optional.Int32) -  The number of items to display for pagination.
 * @param "Offset" (optional.Int32) -  The number of items to skip for pagination.
 * @param "FileId" (optional.String) -  Filter on file id
 * @param "Name" (optional.String) -  Filter on name
 * @param "Type_" (optional.String) -  Filter on type
 * @param "Permission" (optional.String) -  Filter on permission
 * @param "Size" (optional.String) -  Filter on size
 * @param "ChangeDate" (optional.String) -  Filter on change date
 * @param "ModificationDate" (optional.String) -  Filter on modification date
 * @param "AccessDate" (optional.String) -  Filter on access date
 * @param "Gid" (optional.String) -  Filter on gid
 * @param "Uid" (optional.String) -  Filter on uid
@return NodeumFileCollection
*/
func (a *FilesApiService) IndexFilesByTask(ctx _context.Context, taskId string, localVarOptionals *IndexFilesByTaskOpts) (NodeumFileCollection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NodeumFileCollection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(ctx, "FilesApiService.IndexFilesByTask")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/tasks/{task_id}/files"
	localVarPath = strings.Replace(localVarPath, "{"+"task_id"+"}", _neturl.QueryEscape(parameterToString(taskId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.Limit.IsSet() {
		localVarQueryParams.Add("limit", parameterToString(localVarOptionals.Limit.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FileId.IsSet() {
		localVarQueryParams.Add("file_id", parameterToString(localVarOptionals.FileId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Name.IsSet() {
		localVarQueryParams.Add("name", parameterToString(localVarOptionals.Name.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Type_.IsSet() {
		localVarQueryParams.Add("type", parameterToString(localVarOptionals.Type_.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Permission.IsSet() {
		localVarQueryParams.Add("permission", parameterToString(localVarOptionals.Permission.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Size.IsSet() {
		localVarQueryParams.Add("size", parameterToString(localVarOptionals.Size.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ChangeDate.IsSet() {
		localVarQueryParams.Add("change_date", parameterToString(localVarOptionals.ChangeDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ModificationDate.IsSet() {
		localVarQueryParams.Add("modification_date", parameterToString(localVarOptionals.ModificationDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AccessDate.IsSet() {
		localVarQueryParams.Add("access_date", parameterToString(localVarOptionals.AccessDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Gid.IsSet() {
		localVarQueryParams.Add("gid", parameterToString(localVarOptionals.Gid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Uid.IsSet() {
		localVarQueryParams.Add("uid", parameterToString(localVarOptionals.Uid.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if auth, ok := auth["Authorization"]; ok {
				var key string
				if auth.Prefix != "" {
					key = auth.Prefix + " " + auth.Key
				} else {
					key = auth.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v NodeumFileCollection
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// IndexFilesByTaskExecutionOpts Optional parameters for the method 'IndexFilesByTaskExecution'
type IndexFilesByTaskExecutionOpts struct {
    Limit optional.Int32
    Offset optional.Int32
    FileId optional.String
    Name optional.String
    Type_ optional.String
    Permission optional.String
    Size optional.String
    ChangeDate optional.String
    ModificationDate optional.String
    AccessDate optional.String
    Gid optional.String
    Uid optional.String
}

/*
IndexFilesByTaskExecution Lists files on root.
**API Key Scope**: files / index
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param taskExecutionId Numeric ID of task execution.
 * @param optional nil or *IndexFilesByTaskExecutionOpts - Optional Parameters:
 * @param "Limit" (optional.Int32) -  The number of items to display for pagination.
 * @param "Offset" (optional.Int32) -  The number of items to skip for pagination.
 * @param "FileId" (optional.String) -  Filter on file id
 * @param "Name" (optional.String) -  Filter on name
 * @param "Type_" (optional.String) -  Filter on type
 * @param "Permission" (optional.String) -  Filter on permission
 * @param "Size" (optional.String) -  Filter on size
 * @param "ChangeDate" (optional.String) -  Filter on change date
 * @param "ModificationDate" (optional.String) -  Filter on modification date
 * @param "AccessDate" (optional.String) -  Filter on access date
 * @param "Gid" (optional.String) -  Filter on gid
 * @param "Uid" (optional.String) -  Filter on uid
@return NodeumFileCollection
*/
func (a *FilesApiService) IndexFilesByTaskExecution(ctx _context.Context, taskExecutionId int64, localVarOptionals *IndexFilesByTaskExecutionOpts) (NodeumFileCollection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NodeumFileCollection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(ctx, "FilesApiService.IndexFilesByTaskExecution")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/task_executions/{task_execution_id}/files"
	localVarPath = strings.Replace(localVarPath, "{"+"task_execution_id"+"}", _neturl.QueryEscape(parameterToString(taskExecutionId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.Limit.IsSet() {
		localVarQueryParams.Add("limit", parameterToString(localVarOptionals.Limit.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FileId.IsSet() {
		localVarQueryParams.Add("file_id", parameterToString(localVarOptionals.FileId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Name.IsSet() {
		localVarQueryParams.Add("name", parameterToString(localVarOptionals.Name.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Type_.IsSet() {
		localVarQueryParams.Add("type", parameterToString(localVarOptionals.Type_.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Permission.IsSet() {
		localVarQueryParams.Add("permission", parameterToString(localVarOptionals.Permission.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Size.IsSet() {
		localVarQueryParams.Add("size", parameterToString(localVarOptionals.Size.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ChangeDate.IsSet() {
		localVarQueryParams.Add("change_date", parameterToString(localVarOptionals.ChangeDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ModificationDate.IsSet() {
		localVarQueryParams.Add("modification_date", parameterToString(localVarOptionals.ModificationDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AccessDate.IsSet() {
		localVarQueryParams.Add("access_date", parameterToString(localVarOptionals.AccessDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Gid.IsSet() {
		localVarQueryParams.Add("gid", parameterToString(localVarOptionals.Gid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Uid.IsSet() {
		localVarQueryParams.Add("uid", parameterToString(localVarOptionals.Uid.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if auth, ok := auth["Authorization"]; ok {
				var key string
				if auth.Prefix != "" {
					key = auth.Prefix + " " + auth.Key
				} else {
					key = auth.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v NodeumFileCollection
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// IndexFilesByTaskExecutionByTaskOpts Optional parameters for the method 'IndexFilesByTaskExecutionByTask'
type IndexFilesByTaskExecutionByTaskOpts struct {
    Limit optional.Int32
    Offset optional.Int32
    FileId optional.String
    Name optional.String
    Type_ optional.String
    Permission optional.String
    Size optional.String
    ChangeDate optional.String
    ModificationDate optional.String
    AccessDate optional.String
    Gid optional.String
    Uid optional.String
}

/*
IndexFilesByTaskExecutionByTask Lists files on root.
**API Key Scope**: files / index
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param taskId Numeric ID or name of task. Task names are not unique, it's recommanded to use numeric ID.
 * @param taskExecutionId Numeric ID of task execution.
 * @param optional nil or *IndexFilesByTaskExecutionByTaskOpts - Optional Parameters:
 * @param "Limit" (optional.Int32) -  The number of items to display for pagination.
 * @param "Offset" (optional.Int32) -  The number of items to skip for pagination.
 * @param "FileId" (optional.String) -  Filter on file id
 * @param "Name" (optional.String) -  Filter on name
 * @param "Type_" (optional.String) -  Filter on type
 * @param "Permission" (optional.String) -  Filter on permission
 * @param "Size" (optional.String) -  Filter on size
 * @param "ChangeDate" (optional.String) -  Filter on change date
 * @param "ModificationDate" (optional.String) -  Filter on modification date
 * @param "AccessDate" (optional.String) -  Filter on access date
 * @param "Gid" (optional.String) -  Filter on gid
 * @param "Uid" (optional.String) -  Filter on uid
@return NodeumFileCollection
*/
func (a *FilesApiService) IndexFilesByTaskExecutionByTask(ctx _context.Context, taskId string, taskExecutionId int64, localVarOptionals *IndexFilesByTaskExecutionByTaskOpts) (NodeumFileCollection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NodeumFileCollection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(ctx, "FilesApiService.IndexFilesByTaskExecutionByTask")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/tasks/{task_id}/task_executions/{task_execution_id}/files"
	localVarPath = strings.Replace(localVarPath, "{"+"task_id"+"}", _neturl.QueryEscape(parameterToString(taskId, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"task_execution_id"+"}", _neturl.QueryEscape(parameterToString(taskExecutionId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.Limit.IsSet() {
		localVarQueryParams.Add("limit", parameterToString(localVarOptionals.Limit.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FileId.IsSet() {
		localVarQueryParams.Add("file_id", parameterToString(localVarOptionals.FileId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Name.IsSet() {
		localVarQueryParams.Add("name", parameterToString(localVarOptionals.Name.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Type_.IsSet() {
		localVarQueryParams.Add("type", parameterToString(localVarOptionals.Type_.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Permission.IsSet() {
		localVarQueryParams.Add("permission", parameterToString(localVarOptionals.Permission.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Size.IsSet() {
		localVarQueryParams.Add("size", parameterToString(localVarOptionals.Size.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ChangeDate.IsSet() {
		localVarQueryParams.Add("change_date", parameterToString(localVarOptionals.ChangeDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ModificationDate.IsSet() {
		localVarQueryParams.Add("modification_date", parameterToString(localVarOptionals.ModificationDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AccessDate.IsSet() {
		localVarQueryParams.Add("access_date", parameterToString(localVarOptionals.AccessDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Gid.IsSet() {
		localVarQueryParams.Add("gid", parameterToString(localVarOptionals.Gid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Uid.IsSet() {
		localVarQueryParams.Add("uid", parameterToString(localVarOptionals.Uid.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if auth, ok := auth["Authorization"]; ok {
				var key string
				if auth.Prefix != "" {
					key = auth.Prefix + " " + auth.Key
				} else {
					key = auth.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v NodeumFileCollection
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
ShowFile Displays a specific file.
**API Key Scope**: files / show
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param fileId Numeric ID of file.
@return NodeumFileWithPath
*/
func (a *FilesApiService) ShowFile(ctx _context.Context, fileId int32) (NodeumFileWithPath, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NodeumFileWithPath
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(ctx, "FilesApiService.ShowFile")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/files/{file_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"file_id"+"}", _neturl.QueryEscape(parameterToString(fileId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if auth, ok := auth["Authorization"]; ok {
				var key string
				if auth.Prefix != "" {
					key = auth.Prefix + " " + auth.Key
				} else {
					key = auth.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v NodeumFileWithPath
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
ShowFileByCloudPool Displays a specific file.
**API Key Scope**: files / show
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param cloudPoolId Numeric ID or name of cloud pool.
 * @param fileId Numeric ID of file.
@return NodeumFileWithPath
*/
func (a *FilesApiService) ShowFileByCloudPool(ctx _context.Context, cloudPoolId string, fileId int32) (NodeumFileWithPath, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NodeumFileWithPath
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(ctx, "FilesApiService.ShowFileByCloudPool")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cloud_pools/{cloud_pool_id}/files/{file_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"cloud_pool_id"+"}", _neturl.QueryEscape(parameterToString(cloudPoolId, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"file_id"+"}", _neturl.QueryEscape(parameterToString(fileId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if auth, ok := auth["Authorization"]; ok {
				var key string
				if auth.Prefix != "" {
					key = auth.Prefix + " " + auth.Key
				} else {
					key = auth.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v NodeumFileWithPath
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
ShowFileByContainer Displays a specific file.
**API Key Scope**: files / show
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param containerId Numeric ID or name of container.
 * @param fileId Numeric ID of file.
@return NodeumFileWithPath
*/
func (a *FilesApiService) ShowFileByContainer(ctx _context.Context, containerId string, fileId int32) (NodeumFileWithPath, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NodeumFileWithPath
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(ctx, "FilesApiService.ShowFileByContainer")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/containers/{container_id}/files/{file_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"container_id"+"}", _neturl.QueryEscape(parameterToString(containerId, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"file_id"+"}", _neturl.QueryEscape(parameterToString(fileId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if auth, ok := auth["Authorization"]; ok {
				var key string
				if auth.Prefix != "" {
					key = auth.Prefix + " " + auth.Key
				} else {
					key = auth.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v NodeumFileWithPath
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
ShowFileByNasPool Displays a specific file.
**API Key Scope**: files / show
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param nasPoolId Numeric ID or name of NAS pool.
 * @param fileId Numeric ID of file.
@return NodeumFileWithPath
*/
func (a *FilesApiService) ShowFileByNasPool(ctx _context.Context, nasPoolId string, fileId int32) (NodeumFileWithPath, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NodeumFileWithPath
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(ctx, "FilesApiService.ShowFileByNasPool")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/nas_pools/{nas_pool_id}/files/{file_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"nas_pool_id"+"}", _neturl.QueryEscape(parameterToString(nasPoolId, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"file_id"+"}", _neturl.QueryEscape(parameterToString(fileId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if auth, ok := auth["Authorization"]; ok {
				var key string
				if auth.Prefix != "" {
					key = auth.Prefix + " " + auth.Key
				} else {
					key = auth.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v NodeumFileWithPath
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
ShowFileByTapePool Displays a specific file.
**API Key Scope**: files / show
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param tapePoolId Numeric ID, or name of tape pool.
 * @param fileId Numeric ID of file.
@return NodeumFileWithPath
*/
func (a *FilesApiService) ShowFileByTapePool(ctx _context.Context, tapePoolId string, fileId int32) (NodeumFileWithPath, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NodeumFileWithPath
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(ctx, "FilesApiService.ShowFileByTapePool")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/tape_pools/{tape_pool_id}/files/{file_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"tape_pool_id"+"}", _neturl.QueryEscape(parameterToString(tapePoolId, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"file_id"+"}", _neturl.QueryEscape(parameterToString(fileId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if auth, ok := auth["Authorization"]; ok {
				var key string
				if auth.Prefix != "" {
					key = auth.Prefix + " " + auth.Key
				} else {
					key = auth.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v NodeumFileWithPath
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
ShowFileByTask Displays a specific file.
**API Key Scope**: files / show
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param taskId Numeric ID or name of task. Task names are not unique, it's recommanded to use numeric ID.
 * @param fileId Numeric ID of file.
@return NodeumFileWithPath
*/
func (a *FilesApiService) ShowFileByTask(ctx _context.Context, taskId string, fileId int32) (NodeumFileWithPath, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NodeumFileWithPath
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(ctx, "FilesApiService.ShowFileByTask")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/tasks/{task_id}/files/{file_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"task_id"+"}", _neturl.QueryEscape(parameterToString(taskId, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"file_id"+"}", _neturl.QueryEscape(parameterToString(fileId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if auth, ok := auth["Authorization"]; ok {
				var key string
				if auth.Prefix != "" {
					key = auth.Prefix + " " + auth.Key
				} else {
					key = auth.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v NodeumFileWithPath
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
ShowFileByTaskExecution Displays a specific file.
**API Key Scope**: files / show
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param taskExecutionId Numeric ID of task execution.
 * @param fileId Numeric ID of file.
@return NodeumFileWithPath
*/
func (a *FilesApiService) ShowFileByTaskExecution(ctx _context.Context, taskExecutionId int64, fileId int32) (NodeumFileWithPath, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NodeumFileWithPath
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(ctx, "FilesApiService.ShowFileByTaskExecution")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/task_executions/{task_execution_id}/files/{file_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"task_execution_id"+"}", _neturl.QueryEscape(parameterToString(taskExecutionId, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"file_id"+"}", _neturl.QueryEscape(parameterToString(fileId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if auth, ok := auth["Authorization"]; ok {
				var key string
				if auth.Prefix != "" {
					key = auth.Prefix + " " + auth.Key
				} else {
					key = auth.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v NodeumFileWithPath
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
ShowFileByTaskExecutionByTask Displays a specific file.
**API Key Scope**: files / show
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param taskId Numeric ID or name of task. Task names are not unique, it's recommanded to use numeric ID.
 * @param taskExecutionId Numeric ID of task execution.
 * @param fileId Numeric ID of file.
@return NodeumFileWithPath
*/
func (a *FilesApiService) ShowFileByTaskExecutionByTask(ctx _context.Context, taskId string, taskExecutionId int64, fileId int32) (NodeumFileWithPath, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NodeumFileWithPath
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(ctx, "FilesApiService.ShowFileByTaskExecutionByTask")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/tasks/{task_id}/task_executions/{task_execution_id}/files/{file_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"task_id"+"}", _neturl.QueryEscape(parameterToString(taskId, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"task_execution_id"+"}", _neturl.QueryEscape(parameterToString(taskExecutionId, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"file_id"+"}", _neturl.QueryEscape(parameterToString(fileId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if auth, ok := auth["Authorization"]; ok {
				var key string
				if auth.Prefix != "" {
					key = auth.Prefix + " " + auth.Key
				} else {
					key = auth.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v NodeumFileWithPath
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
