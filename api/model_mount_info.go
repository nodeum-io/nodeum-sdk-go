/*
 * Nodeum API Reference
 *
 * The Nodeum API makes it easy to tap into the digital data mesh that runs across your organisation. Make requests to our API endpoints and we’ll give you everything you need to interconnect your business workflows with your storage.  All production API requests are made to:  http://nodeumhostname/api/  The current production version of the API is v1.   **REST** The Nodeum API is a RESTful API. This means that the API is designed to allow you to get, create, update, & delete objects with the HTTP verbs GET, POST, PUT, PATCH, & DELETE.  **JSON** The Nodeum API speaks exclusively in JSON. This means that you should always set the Content-Type header to application/json to ensure that your requests are properly accepted and processed by the API.  **Authentication** All API calls require user-password authentication.   **Cross-Origin Resource Sharing** The Nodeum API supports CORS for communicating from Javascript for these endpoints. You will need to specify an Origin URI when creating your application to allow for CORS to be whitelisted for your domain.   **Pagination** Some endpoints such as File Listing return a potentially lengthy array of objects. In order to keep the response sizes manageable the API will take advantage of pagination. Pagination is a mechanism for returning a subset of the results for a request and allowing for subsequent requests to “page” through the rest of the results until the end is reached. Paginated endpoints follow a standard interface that accepts two query parameters, limit and offset, and return a payload that follows a standard form. These parameters names and their behavior are borrowed from SQL LIMIT and OFFSET keywords.  **Versioning** The Nodeum API is constantly being worked on to add features, make improvements, and fix bugs. This means that you should expect changes to be introduced and documented.   However, there are some changes or additions that are considered backwards-compatible and your applications should be flexible enough to handle them. These include:  - Adding new endpoints to the API - Adding new attributes to the response of an existing endpoint - Changing the order of attributes of responses (JSON by definition is an object of unordered key/value pairs)   **Filter parameters** When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)
 *
 * API version: 2.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package nodeum

import (
	"bytes"
	"encoding/json"
)

// MountInfo struct for MountInfo
type MountInfo struct {
	Id *int32 `json:"id,omitempty"`
	MajorMinor *string `json:"major_minor,omitempty"`
	Target *string `json:"target,omitempty"`
	Source *string `json:"source,omitempty"`
	Options *string `json:"options,omitempty"`
	Type *string `json:"type,omitempty"`
	NasId *int32 `json:"nas_id,omitempty"`
	NasName *string `json:"nas_name,omitempty"`
	NasShareId *int32 `json:"nas_share_id,omitempty"`
	NasPoolId *int32 `json:"nas_pool_id,omitempty"`
	NasPoolName *string `json:"nas_pool_name,omitempty"`
	CloudConnectorId *int32 `json:"cloud_connector_id,omitempty"`
	CloudConnectorName *string `json:"cloud_connector_name,omitempty"`
	CloudBucketId *int32 `json:"cloud_bucket_id,omitempty"`
	CloudBucketName *string `json:"cloud_bucket_name,omitempty"`
	CloudPoolId *int32 `json:"cloud_pool_id,omitempty"`
	CloudPoolName *string `json:"cloud_pool_name,omitempty"`
	MountPointId *int32 `json:"mount_point_id,omitempty"`
	MountPointName *string `json:"mount_point_name,omitempty"`
	TapeId *int32 `json:"tape_id,omitempty"`
	TapeBarcode *string `json:"tape_barcode,omitempty"`
	TapeLibraryId *int32 `json:"tape_library_id,omitempty"`
	TapeLibraryName *string `json:"tape_library_name,omitempty"`
	TapeLibrarySerial *string `json:"tape_library_serial,omitempty"`
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MountInfo) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MountInfo) GetIdOk() (int32, bool) {
	if o == nil || o.Id == nil {
		var ret int32
		return ret, false
	}
	return *o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MountInfo) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *MountInfo) SetId(v int32) {
	o.Id = &v
}

// GetMajorMinor returns the MajorMinor field value if set, zero value otherwise.
func (o *MountInfo) GetMajorMinor() string {
	if o == nil || o.MajorMinor == nil {
		var ret string
		return ret
	}
	return *o.MajorMinor
}

// GetMajorMinorOk returns a tuple with the MajorMinor field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MountInfo) GetMajorMinorOk() (string, bool) {
	if o == nil || o.MajorMinor == nil {
		var ret string
		return ret, false
	}
	return *o.MajorMinor, true
}

// HasMajorMinor returns a boolean if a field has been set.
func (o *MountInfo) HasMajorMinor() bool {
	if o != nil && o.MajorMinor != nil {
		return true
	}

	return false
}

// SetMajorMinor gets a reference to the given string and assigns it to the MajorMinor field.
func (o *MountInfo) SetMajorMinor(v string) {
	o.MajorMinor = &v
}

// GetTarget returns the Target field value if set, zero value otherwise.
func (o *MountInfo) GetTarget() string {
	if o == nil || o.Target == nil {
		var ret string
		return ret
	}
	return *o.Target
}

// GetTargetOk returns a tuple with the Target field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MountInfo) GetTargetOk() (string, bool) {
	if o == nil || o.Target == nil {
		var ret string
		return ret, false
	}
	return *o.Target, true
}

// HasTarget returns a boolean if a field has been set.
func (o *MountInfo) HasTarget() bool {
	if o != nil && o.Target != nil {
		return true
	}

	return false
}

// SetTarget gets a reference to the given string and assigns it to the Target field.
func (o *MountInfo) SetTarget(v string) {
	o.Target = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *MountInfo) GetSource() string {
	if o == nil || o.Source == nil {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MountInfo) GetSourceOk() (string, bool) {
	if o == nil || o.Source == nil {
		var ret string
		return ret, false
	}
	return *o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *MountInfo) HasSource() bool {
	if o != nil && o.Source != nil {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *MountInfo) SetSource(v string) {
	o.Source = &v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *MountInfo) GetOptions() string {
	if o == nil || o.Options == nil {
		var ret string
		return ret
	}
	return *o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MountInfo) GetOptionsOk() (string, bool) {
	if o == nil || o.Options == nil {
		var ret string
		return ret, false
	}
	return *o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *MountInfo) HasOptions() bool {
	if o != nil && o.Options != nil {
		return true
	}

	return false
}

// SetOptions gets a reference to the given string and assigns it to the Options field.
func (o *MountInfo) SetOptions(v string) {
	o.Options = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *MountInfo) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MountInfo) GetTypeOk() (string, bool) {
	if o == nil || o.Type == nil {
		var ret string
		return ret, false
	}
	return *o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *MountInfo) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *MountInfo) SetType(v string) {
	o.Type = &v
}

// GetNasId returns the NasId field value if set, zero value otherwise.
func (o *MountInfo) GetNasId() int32 {
	if o == nil || o.NasId == nil {
		var ret int32
		return ret
	}
	return *o.NasId
}

// GetNasIdOk returns a tuple with the NasId field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MountInfo) GetNasIdOk() (int32, bool) {
	if o == nil || o.NasId == nil {
		var ret int32
		return ret, false
	}
	return *o.NasId, true
}

// HasNasId returns a boolean if a field has been set.
func (o *MountInfo) HasNasId() bool {
	if o != nil && o.NasId != nil {
		return true
	}

	return false
}

// SetNasId gets a reference to the given int32 and assigns it to the NasId field.
func (o *MountInfo) SetNasId(v int32) {
	o.NasId = &v
}

// GetNasName returns the NasName field value if set, zero value otherwise.
func (o *MountInfo) GetNasName() string {
	if o == nil || o.NasName == nil {
		var ret string
		return ret
	}
	return *o.NasName
}

// GetNasNameOk returns a tuple with the NasName field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MountInfo) GetNasNameOk() (string, bool) {
	if o == nil || o.NasName == nil {
		var ret string
		return ret, false
	}
	return *o.NasName, true
}

// HasNasName returns a boolean if a field has been set.
func (o *MountInfo) HasNasName() bool {
	if o != nil && o.NasName != nil {
		return true
	}

	return false
}

// SetNasName gets a reference to the given string and assigns it to the NasName field.
func (o *MountInfo) SetNasName(v string) {
	o.NasName = &v
}

// GetNasShareId returns the NasShareId field value if set, zero value otherwise.
func (o *MountInfo) GetNasShareId() int32 {
	if o == nil || o.NasShareId == nil {
		var ret int32
		return ret
	}
	return *o.NasShareId
}

// GetNasShareIdOk returns a tuple with the NasShareId field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MountInfo) GetNasShareIdOk() (int32, bool) {
	if o == nil || o.NasShareId == nil {
		var ret int32
		return ret, false
	}
	return *o.NasShareId, true
}

// HasNasShareId returns a boolean if a field has been set.
func (o *MountInfo) HasNasShareId() bool {
	if o != nil && o.NasShareId != nil {
		return true
	}

	return false
}

// SetNasShareId gets a reference to the given int32 and assigns it to the NasShareId field.
func (o *MountInfo) SetNasShareId(v int32) {
	o.NasShareId = &v
}

// GetNasPoolId returns the NasPoolId field value if set, zero value otherwise.
func (o *MountInfo) GetNasPoolId() int32 {
	if o == nil || o.NasPoolId == nil {
		var ret int32
		return ret
	}
	return *o.NasPoolId
}

// GetNasPoolIdOk returns a tuple with the NasPoolId field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MountInfo) GetNasPoolIdOk() (int32, bool) {
	if o == nil || o.NasPoolId == nil {
		var ret int32
		return ret, false
	}
	return *o.NasPoolId, true
}

// HasNasPoolId returns a boolean if a field has been set.
func (o *MountInfo) HasNasPoolId() bool {
	if o != nil && o.NasPoolId != nil {
		return true
	}

	return false
}

// SetNasPoolId gets a reference to the given int32 and assigns it to the NasPoolId field.
func (o *MountInfo) SetNasPoolId(v int32) {
	o.NasPoolId = &v
}

// GetNasPoolName returns the NasPoolName field value if set, zero value otherwise.
func (o *MountInfo) GetNasPoolName() string {
	if o == nil || o.NasPoolName == nil {
		var ret string
		return ret
	}
	return *o.NasPoolName
}

// GetNasPoolNameOk returns a tuple with the NasPoolName field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MountInfo) GetNasPoolNameOk() (string, bool) {
	if o == nil || o.NasPoolName == nil {
		var ret string
		return ret, false
	}
	return *o.NasPoolName, true
}

// HasNasPoolName returns a boolean if a field has been set.
func (o *MountInfo) HasNasPoolName() bool {
	if o != nil && o.NasPoolName != nil {
		return true
	}

	return false
}

// SetNasPoolName gets a reference to the given string and assigns it to the NasPoolName field.
func (o *MountInfo) SetNasPoolName(v string) {
	o.NasPoolName = &v
}

// GetCloudConnectorId returns the CloudConnectorId field value if set, zero value otherwise.
func (o *MountInfo) GetCloudConnectorId() int32 {
	if o == nil || o.CloudConnectorId == nil {
		var ret int32
		return ret
	}
	return *o.CloudConnectorId
}

// GetCloudConnectorIdOk returns a tuple with the CloudConnectorId field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MountInfo) GetCloudConnectorIdOk() (int32, bool) {
	if o == nil || o.CloudConnectorId == nil {
		var ret int32
		return ret, false
	}
	return *o.CloudConnectorId, true
}

// HasCloudConnectorId returns a boolean if a field has been set.
func (o *MountInfo) HasCloudConnectorId() bool {
	if o != nil && o.CloudConnectorId != nil {
		return true
	}

	return false
}

// SetCloudConnectorId gets a reference to the given int32 and assigns it to the CloudConnectorId field.
func (o *MountInfo) SetCloudConnectorId(v int32) {
	o.CloudConnectorId = &v
}

// GetCloudConnectorName returns the CloudConnectorName field value if set, zero value otherwise.
func (o *MountInfo) GetCloudConnectorName() string {
	if o == nil || o.CloudConnectorName == nil {
		var ret string
		return ret
	}
	return *o.CloudConnectorName
}

// GetCloudConnectorNameOk returns a tuple with the CloudConnectorName field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MountInfo) GetCloudConnectorNameOk() (string, bool) {
	if o == nil || o.CloudConnectorName == nil {
		var ret string
		return ret, false
	}
	return *o.CloudConnectorName, true
}

// HasCloudConnectorName returns a boolean if a field has been set.
func (o *MountInfo) HasCloudConnectorName() bool {
	if o != nil && o.CloudConnectorName != nil {
		return true
	}

	return false
}

// SetCloudConnectorName gets a reference to the given string and assigns it to the CloudConnectorName field.
func (o *MountInfo) SetCloudConnectorName(v string) {
	o.CloudConnectorName = &v
}

// GetCloudBucketId returns the CloudBucketId field value if set, zero value otherwise.
func (o *MountInfo) GetCloudBucketId() int32 {
	if o == nil || o.CloudBucketId == nil {
		var ret int32
		return ret
	}
	return *o.CloudBucketId
}

// GetCloudBucketIdOk returns a tuple with the CloudBucketId field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MountInfo) GetCloudBucketIdOk() (int32, bool) {
	if o == nil || o.CloudBucketId == nil {
		var ret int32
		return ret, false
	}
	return *o.CloudBucketId, true
}

// HasCloudBucketId returns a boolean if a field has been set.
func (o *MountInfo) HasCloudBucketId() bool {
	if o != nil && o.CloudBucketId != nil {
		return true
	}

	return false
}

// SetCloudBucketId gets a reference to the given int32 and assigns it to the CloudBucketId field.
func (o *MountInfo) SetCloudBucketId(v int32) {
	o.CloudBucketId = &v
}

// GetCloudBucketName returns the CloudBucketName field value if set, zero value otherwise.
func (o *MountInfo) GetCloudBucketName() string {
	if o == nil || o.CloudBucketName == nil {
		var ret string
		return ret
	}
	return *o.CloudBucketName
}

// GetCloudBucketNameOk returns a tuple with the CloudBucketName field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MountInfo) GetCloudBucketNameOk() (string, bool) {
	if o == nil || o.CloudBucketName == nil {
		var ret string
		return ret, false
	}
	return *o.CloudBucketName, true
}

// HasCloudBucketName returns a boolean if a field has been set.
func (o *MountInfo) HasCloudBucketName() bool {
	if o != nil && o.CloudBucketName != nil {
		return true
	}

	return false
}

// SetCloudBucketName gets a reference to the given string and assigns it to the CloudBucketName field.
func (o *MountInfo) SetCloudBucketName(v string) {
	o.CloudBucketName = &v
}

// GetCloudPoolId returns the CloudPoolId field value if set, zero value otherwise.
func (o *MountInfo) GetCloudPoolId() int32 {
	if o == nil || o.CloudPoolId == nil {
		var ret int32
		return ret
	}
	return *o.CloudPoolId
}

// GetCloudPoolIdOk returns a tuple with the CloudPoolId field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MountInfo) GetCloudPoolIdOk() (int32, bool) {
	if o == nil || o.CloudPoolId == nil {
		var ret int32
		return ret, false
	}
	return *o.CloudPoolId, true
}

// HasCloudPoolId returns a boolean if a field has been set.
func (o *MountInfo) HasCloudPoolId() bool {
	if o != nil && o.CloudPoolId != nil {
		return true
	}

	return false
}

// SetCloudPoolId gets a reference to the given int32 and assigns it to the CloudPoolId field.
func (o *MountInfo) SetCloudPoolId(v int32) {
	o.CloudPoolId = &v
}

// GetCloudPoolName returns the CloudPoolName field value if set, zero value otherwise.
func (o *MountInfo) GetCloudPoolName() string {
	if o == nil || o.CloudPoolName == nil {
		var ret string
		return ret
	}
	return *o.CloudPoolName
}

// GetCloudPoolNameOk returns a tuple with the CloudPoolName field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MountInfo) GetCloudPoolNameOk() (string, bool) {
	if o == nil || o.CloudPoolName == nil {
		var ret string
		return ret, false
	}
	return *o.CloudPoolName, true
}

// HasCloudPoolName returns a boolean if a field has been set.
func (o *MountInfo) HasCloudPoolName() bool {
	if o != nil && o.CloudPoolName != nil {
		return true
	}

	return false
}

// SetCloudPoolName gets a reference to the given string and assigns it to the CloudPoolName field.
func (o *MountInfo) SetCloudPoolName(v string) {
	o.CloudPoolName = &v
}

// GetMountPointId returns the MountPointId field value if set, zero value otherwise.
func (o *MountInfo) GetMountPointId() int32 {
	if o == nil || o.MountPointId == nil {
		var ret int32
		return ret
	}
	return *o.MountPointId
}

// GetMountPointIdOk returns a tuple with the MountPointId field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MountInfo) GetMountPointIdOk() (int32, bool) {
	if o == nil || o.MountPointId == nil {
		var ret int32
		return ret, false
	}
	return *o.MountPointId, true
}

// HasMountPointId returns a boolean if a field has been set.
func (o *MountInfo) HasMountPointId() bool {
	if o != nil && o.MountPointId != nil {
		return true
	}

	return false
}

// SetMountPointId gets a reference to the given int32 and assigns it to the MountPointId field.
func (o *MountInfo) SetMountPointId(v int32) {
	o.MountPointId = &v
}

// GetMountPointName returns the MountPointName field value if set, zero value otherwise.
func (o *MountInfo) GetMountPointName() string {
	if o == nil || o.MountPointName == nil {
		var ret string
		return ret
	}
	return *o.MountPointName
}

// GetMountPointNameOk returns a tuple with the MountPointName field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MountInfo) GetMountPointNameOk() (string, bool) {
	if o == nil || o.MountPointName == nil {
		var ret string
		return ret, false
	}
	return *o.MountPointName, true
}

// HasMountPointName returns a boolean if a field has been set.
func (o *MountInfo) HasMountPointName() bool {
	if o != nil && o.MountPointName != nil {
		return true
	}

	return false
}

// SetMountPointName gets a reference to the given string and assigns it to the MountPointName field.
func (o *MountInfo) SetMountPointName(v string) {
	o.MountPointName = &v
}

// GetTapeId returns the TapeId field value if set, zero value otherwise.
func (o *MountInfo) GetTapeId() int32 {
	if o == nil || o.TapeId == nil {
		var ret int32
		return ret
	}
	return *o.TapeId
}

// GetTapeIdOk returns a tuple with the TapeId field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MountInfo) GetTapeIdOk() (int32, bool) {
	if o == nil || o.TapeId == nil {
		var ret int32
		return ret, false
	}
	return *o.TapeId, true
}

// HasTapeId returns a boolean if a field has been set.
func (o *MountInfo) HasTapeId() bool {
	if o != nil && o.TapeId != nil {
		return true
	}

	return false
}

// SetTapeId gets a reference to the given int32 and assigns it to the TapeId field.
func (o *MountInfo) SetTapeId(v int32) {
	o.TapeId = &v
}

// GetTapeBarcode returns the TapeBarcode field value if set, zero value otherwise.
func (o *MountInfo) GetTapeBarcode() string {
	if o == nil || o.TapeBarcode == nil {
		var ret string
		return ret
	}
	return *o.TapeBarcode
}

// GetTapeBarcodeOk returns a tuple with the TapeBarcode field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MountInfo) GetTapeBarcodeOk() (string, bool) {
	if o == nil || o.TapeBarcode == nil {
		var ret string
		return ret, false
	}
	return *o.TapeBarcode, true
}

// HasTapeBarcode returns a boolean if a field has been set.
func (o *MountInfo) HasTapeBarcode() bool {
	if o != nil && o.TapeBarcode != nil {
		return true
	}

	return false
}

// SetTapeBarcode gets a reference to the given string and assigns it to the TapeBarcode field.
func (o *MountInfo) SetTapeBarcode(v string) {
	o.TapeBarcode = &v
}

// GetTapeLibraryId returns the TapeLibraryId field value if set, zero value otherwise.
func (o *MountInfo) GetTapeLibraryId() int32 {
	if o == nil || o.TapeLibraryId == nil {
		var ret int32
		return ret
	}
	return *o.TapeLibraryId
}

// GetTapeLibraryIdOk returns a tuple with the TapeLibraryId field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MountInfo) GetTapeLibraryIdOk() (int32, bool) {
	if o == nil || o.TapeLibraryId == nil {
		var ret int32
		return ret, false
	}
	return *o.TapeLibraryId, true
}

// HasTapeLibraryId returns a boolean if a field has been set.
func (o *MountInfo) HasTapeLibraryId() bool {
	if o != nil && o.TapeLibraryId != nil {
		return true
	}

	return false
}

// SetTapeLibraryId gets a reference to the given int32 and assigns it to the TapeLibraryId field.
func (o *MountInfo) SetTapeLibraryId(v int32) {
	o.TapeLibraryId = &v
}

// GetTapeLibraryName returns the TapeLibraryName field value if set, zero value otherwise.
func (o *MountInfo) GetTapeLibraryName() string {
	if o == nil || o.TapeLibraryName == nil {
		var ret string
		return ret
	}
	return *o.TapeLibraryName
}

// GetTapeLibraryNameOk returns a tuple with the TapeLibraryName field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MountInfo) GetTapeLibraryNameOk() (string, bool) {
	if o == nil || o.TapeLibraryName == nil {
		var ret string
		return ret, false
	}
	return *o.TapeLibraryName, true
}

// HasTapeLibraryName returns a boolean if a field has been set.
func (o *MountInfo) HasTapeLibraryName() bool {
	if o != nil && o.TapeLibraryName != nil {
		return true
	}

	return false
}

// SetTapeLibraryName gets a reference to the given string and assigns it to the TapeLibraryName field.
func (o *MountInfo) SetTapeLibraryName(v string) {
	o.TapeLibraryName = &v
}

// GetTapeLibrarySerial returns the TapeLibrarySerial field value if set, zero value otherwise.
func (o *MountInfo) GetTapeLibrarySerial() string {
	if o == nil || o.TapeLibrarySerial == nil {
		var ret string
		return ret
	}
	return *o.TapeLibrarySerial
}

// GetTapeLibrarySerialOk returns a tuple with the TapeLibrarySerial field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MountInfo) GetTapeLibrarySerialOk() (string, bool) {
	if o == nil || o.TapeLibrarySerial == nil {
		var ret string
		return ret, false
	}
	return *o.TapeLibrarySerial, true
}

// HasTapeLibrarySerial returns a boolean if a field has been set.
func (o *MountInfo) HasTapeLibrarySerial() bool {
	if o != nil && o.TapeLibrarySerial != nil {
		return true
	}

	return false
}

// SetTapeLibrarySerial gets a reference to the given string and assigns it to the TapeLibrarySerial field.
func (o *MountInfo) SetTapeLibrarySerial(v string) {
	o.TapeLibrarySerial = &v
}

type NullableMountInfo struct {
	Value MountInfo
	ExplicitNull bool
}

func (v NullableMountInfo) MarshalJSON() ([]byte, error) {
    switch {
    case v.ExplicitNull:
        return []byte("null"), nil
    default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableMountInfo) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
