/*
 * Nodeum API
 *
 * # About  This document describes the Nodeum API version 2:  If you are looking for any information about the product itself, reach the product website https://www.nodeum.io. You can also contact us at this email address : info@nodeum.io  # Filter parameters When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  
 *
 * API version: 2.1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package nodeum

import (
	"bytes"
	"encoding/json"
)

// MountCollection struct for MountCollection
type MountCollection struct {
	Mounts *[]MountInfo `json:"mounts,omitempty"`
}

// GetMounts returns the Mounts field value if set, zero value otherwise.
func (o *MountCollection) GetMounts() []MountInfo {
	if o == nil || o.Mounts == nil {
		var ret []MountInfo
		return ret
	}
	return *o.Mounts
}

// GetMountsOk returns a tuple with the Mounts field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *MountCollection) GetMountsOk() ([]MountInfo, bool) {
	if o == nil || o.Mounts == nil {
		var ret []MountInfo
		return ret, false
	}
	return *o.Mounts, true
}

// HasMounts returns a boolean if a field has been set.
func (o *MountCollection) HasMounts() bool {
	if o != nil && o.Mounts != nil {
		return true
	}

	return false
}

// SetMounts gets a reference to the given []MountInfo and assigns it to the Mounts field.
func (o *MountCollection) SetMounts(v []MountInfo) {
	o.Mounts = &v
}

type NullableMountCollection struct {
	Value MountCollection
	ExplicitNull bool
}

func (v NullableMountCollection) MarshalJSON() ([]byte, error) {
    switch {
    case v.ExplicitNull:
        return []byte("null"), nil
    default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableMountCollection) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
