/*
 * Nodeum API
 *
 * # About  This document describes the Nodeum API version 2:  If you are looking for any information about the product itself, reach the product website https://www.nodeum.io. You can also contact us at this email address : info@nodeum.io  # Filter parameters When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  
 *
 * API version: 2.1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package nodeum

import (
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ _context.Context
)

// TaskExecutionsApiService TaskExecutionsApi service
type TaskExecutionsApiService service

// IndexTaskExecutionsOpts Optional parameters for the method 'IndexTaskExecutions'
type IndexTaskExecutionsOpts struct {
    Limit optional.Int32
    Offset optional.Int32
    SortBy optional.Interface
    CompleteList optional.Bool
    Id optional.String
    TaskId optional.String
    Name optional.String
    WorkflowType optional.String
    WorkflowAction optional.String
    SourceType optional.String
    DestinationType optional.String
    Status optional.String
    LogTime optional.String
    JobStarted optional.String
    JobFinished optional.String
    CreationDate optional.String
    ModificationDate optional.String
    ToProcessSize optional.String
    ProcessedSize optional.String
    ToProcessFiles optional.String
    ProcessedFiles optional.String
    FinalizedFiles optional.String
    EstimationTime optional.String
    Bandwidth optional.String
}

/*
IndexTaskExecutions Lists all task executions.
**API Key Scope**: task_executions / index
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *IndexTaskExecutionsOpts - Optional Parameters:
 * @param "Limit" (optional.Int32) -  The number of items to display for pagination.
 * @param "Offset" (optional.Int32) -  The number of items to skip for pagination.
 * @param "SortBy" (optional.Interface of []string) -  Sort results by attribute.  Can sort on multiple attributes, separated by `|`. Order direction can be suffixing the attribute by either `:asc` (default) or `:desc`.
 * @param "CompleteList" (optional.Bool) -  If `false`, only includes the last correct execution of a task.
 * @param "Id" (optional.String) -  Filter on id
 * @param "TaskId" (optional.String) -  Filter on task id
 * @param "Name" (optional.String) -  Filter on name
 * @param "WorkflowType" (optional.String) -  Filter on task workflow type
 * @param "WorkflowAction" (optional.String) -  Filter on task workflow action
 * @param "SourceType" (optional.String) -  Filter on task source type
 * @param "DestinationType" (optional.String) -  Filter on task destination type
 * @param "Status" (optional.String) -  Filter on status
 * @param "LogTime" (optional.String) -  Filter on log time
 * @param "JobStarted" (optional.String) -  Filter on job started
 * @param "JobFinished" (optional.String) -  Filter on job finished
 * @param "CreationDate" (optional.String) -  Filter on creation date
 * @param "ModificationDate" (optional.String) -  Filter on modification date
 * @param "ToProcessSize" (optional.String) -  Filter on to process size
 * @param "ProcessedSize" (optional.String) -  Filter on processed size
 * @param "ToProcessFiles" (optional.String) -  Filter on to process files
 * @param "ProcessedFiles" (optional.String) -  Filter on processed files
 * @param "FinalizedFiles" (optional.String) -  Filter on finalized files
 * @param "EstimationTime" (optional.String) -  Filter on estimation time
 * @param "Bandwidth" (optional.String) -  Filter on bandwidth
@return TaskExecutionCollection
*/
func (a *TaskExecutionsApiService) IndexTaskExecutions(ctx _context.Context, localVarOptionals *IndexTaskExecutionsOpts) (TaskExecutionCollection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  TaskExecutionCollection
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/task_executions"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.Limit.IsSet() {
		localVarQueryParams.Add("limit", parameterToString(localVarOptionals.Limit.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SortBy.IsSet() {
		localVarQueryParams.Add("sort_by", parameterToString(localVarOptionals.SortBy.Value(), "pipe"))
	}
	if localVarOptionals != nil && localVarOptionals.CompleteList.IsSet() {
		localVarQueryParams.Add("complete_list", parameterToString(localVarOptionals.CompleteList.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Id.IsSet() {
		localVarQueryParams.Add("id", parameterToString(localVarOptionals.Id.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TaskId.IsSet() {
		localVarQueryParams.Add("task_id", parameterToString(localVarOptionals.TaskId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Name.IsSet() {
		localVarQueryParams.Add("name", parameterToString(localVarOptionals.Name.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WorkflowType.IsSet() {
		localVarQueryParams.Add("workflow_type", parameterToString(localVarOptionals.WorkflowType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WorkflowAction.IsSet() {
		localVarQueryParams.Add("workflow_action", parameterToString(localVarOptionals.WorkflowAction.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SourceType.IsSet() {
		localVarQueryParams.Add("source_type", parameterToString(localVarOptionals.SourceType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DestinationType.IsSet() {
		localVarQueryParams.Add("destination_type", parameterToString(localVarOptionals.DestinationType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Status.IsSet() {
		localVarQueryParams.Add("status", parameterToString(localVarOptionals.Status.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LogTime.IsSet() {
		localVarQueryParams.Add("log_time", parameterToString(localVarOptionals.LogTime.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.JobStarted.IsSet() {
		localVarQueryParams.Add("job_started", parameterToString(localVarOptionals.JobStarted.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.JobFinished.IsSet() {
		localVarQueryParams.Add("job_finished", parameterToString(localVarOptionals.JobFinished.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CreationDate.IsSet() {
		localVarQueryParams.Add("creation_date", parameterToString(localVarOptionals.CreationDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ModificationDate.IsSet() {
		localVarQueryParams.Add("modification_date", parameterToString(localVarOptionals.ModificationDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ToProcessSize.IsSet() {
		localVarQueryParams.Add("to_process_size", parameterToString(localVarOptionals.ToProcessSize.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProcessedSize.IsSet() {
		localVarQueryParams.Add("processed_size", parameterToString(localVarOptionals.ProcessedSize.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ToProcessFiles.IsSet() {
		localVarQueryParams.Add("to_process_files", parameterToString(localVarOptionals.ToProcessFiles.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProcessedFiles.IsSet() {
		localVarQueryParams.Add("processed_files", parameterToString(localVarOptionals.ProcessedFiles.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FinalizedFiles.IsSet() {
		localVarQueryParams.Add("finalized_files", parameterToString(localVarOptionals.FinalizedFiles.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.EstimationTime.IsSet() {
		localVarQueryParams.Add("estimation_time", parameterToString(localVarOptionals.EstimationTime.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Bandwidth.IsSet() {
		localVarQueryParams.Add("bandwidth", parameterToString(localVarOptionals.Bandwidth.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v TaskExecutionCollection
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// IndexTaskExecutionsByTaskOpts Optional parameters for the method 'IndexTaskExecutionsByTask'
type IndexTaskExecutionsByTaskOpts struct {
    TaskId optional.String
    Limit optional.Int32
    Offset optional.Int32
    SortBy optional.Interface
    Id optional.String
    Name optional.String
    WorkflowType optional.String
    WorkflowAction optional.String
    SourceType optional.String
    DestinationType optional.String
    Status optional.String
    LogTime optional.String
    JobStarted optional.String
    JobFinished optional.String
    ToProcessSize optional.String
    ProcessedSize optional.String
    ToProcessFiles optional.String
    ProcessedFiles optional.String
    FinalizedFiles optional.String
    EstimationTime optional.String
    Bandwidth optional.String
}

/*
IndexTaskExecutionsByTask Lists all task executions.
**API Key Scope**: task_executions / index
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *IndexTaskExecutionsByTaskOpts - Optional Parameters:
 * @param "TaskId" (optional.String) -  Filter on task id
 * @param "Limit" (optional.Int32) -  The number of items to display for pagination.
 * @param "Offset" (optional.Int32) -  The number of items to skip for pagination.
 * @param "SortBy" (optional.Interface of []string) -  Sort results by attribute.  Can sort on multiple attributes, separated by `|`. Order direction can be suffixing the attribute by either `:asc` (default) or `:desc`.
 * @param "Id" (optional.String) -  Filter on id
 * @param "Name" (optional.String) -  Filter on name
 * @param "WorkflowType" (optional.String) -  Filter on task workflow type
 * @param "WorkflowAction" (optional.String) -  Filter on task workflow action
 * @param "SourceType" (optional.String) -  Filter on task source type
 * @param "DestinationType" (optional.String) -  Filter on task destination type
 * @param "Status" (optional.String) -  Filter on status
 * @param "LogTime" (optional.String) -  Filter on log time
 * @param "JobStarted" (optional.String) -  Filter on job started
 * @param "JobFinished" (optional.String) -  Filter on job finished
 * @param "ToProcessSize" (optional.String) -  Filter on to process size
 * @param "ProcessedSize" (optional.String) -  Filter on processed size
 * @param "ToProcessFiles" (optional.String) -  Filter on to process files
 * @param "ProcessedFiles" (optional.String) -  Filter on processed files
 * @param "FinalizedFiles" (optional.String) -  Filter on finalized files
 * @param "EstimationTime" (optional.String) -  Filter on estimation time
 * @param "Bandwidth" (optional.String) -  Filter on bandwidth
@return TaskExecutionCollection
*/
func (a *TaskExecutionsApiService) IndexTaskExecutionsByTask(ctx _context.Context, localVarOptionals *IndexTaskExecutionsByTaskOpts) (TaskExecutionCollection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  TaskExecutionCollection
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/tasks/{task_id}/task_executions"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.TaskId.IsSet() {
		localVarQueryParams.Add("task_id", parameterToString(localVarOptionals.TaskId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Limit.IsSet() {
		localVarQueryParams.Add("limit", parameterToString(localVarOptionals.Limit.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SortBy.IsSet() {
		localVarQueryParams.Add("sort_by", parameterToString(localVarOptionals.SortBy.Value(), "pipe"))
	}
	if localVarOptionals != nil && localVarOptionals.Id.IsSet() {
		localVarQueryParams.Add("id", parameterToString(localVarOptionals.Id.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Name.IsSet() {
		localVarQueryParams.Add("name", parameterToString(localVarOptionals.Name.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WorkflowType.IsSet() {
		localVarQueryParams.Add("workflow_type", parameterToString(localVarOptionals.WorkflowType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WorkflowAction.IsSet() {
		localVarQueryParams.Add("workflow_action", parameterToString(localVarOptionals.WorkflowAction.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SourceType.IsSet() {
		localVarQueryParams.Add("source_type", parameterToString(localVarOptionals.SourceType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DestinationType.IsSet() {
		localVarQueryParams.Add("destination_type", parameterToString(localVarOptionals.DestinationType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Status.IsSet() {
		localVarQueryParams.Add("status", parameterToString(localVarOptionals.Status.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LogTime.IsSet() {
		localVarQueryParams.Add("log_time", parameterToString(localVarOptionals.LogTime.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.JobStarted.IsSet() {
		localVarQueryParams.Add("job_started", parameterToString(localVarOptionals.JobStarted.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.JobFinished.IsSet() {
		localVarQueryParams.Add("job_finished", parameterToString(localVarOptionals.JobFinished.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ToProcessSize.IsSet() {
		localVarQueryParams.Add("to_process_size", parameterToString(localVarOptionals.ToProcessSize.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProcessedSize.IsSet() {
		localVarQueryParams.Add("processed_size", parameterToString(localVarOptionals.ProcessedSize.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ToProcessFiles.IsSet() {
		localVarQueryParams.Add("to_process_files", parameterToString(localVarOptionals.ToProcessFiles.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProcessedFiles.IsSet() {
		localVarQueryParams.Add("processed_files", parameterToString(localVarOptionals.ProcessedFiles.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FinalizedFiles.IsSet() {
		localVarQueryParams.Add("finalized_files", parameterToString(localVarOptionals.FinalizedFiles.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.EstimationTime.IsSet() {
		localVarQueryParams.Add("estimation_time", parameterToString(localVarOptionals.EstimationTime.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Bandwidth.IsSet() {
		localVarQueryParams.Add("bandwidth", parameterToString(localVarOptionals.Bandwidth.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v TaskExecutionCollection
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
ShowTaskExecution Displays a specific task execution.
**API Key Scope**: task_executions / show
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param taskExecutionId Numeric ID of task execution.
@return TaskExecution
*/
func (a *TaskExecutionsApiService) ShowTaskExecution(ctx _context.Context, taskExecutionId string) (TaskExecution, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  TaskExecution
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/task_executions/{task_execution_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"task_execution_id"+"}", _neturl.QueryEscape(parameterToString(taskExecutionId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v TaskExecution
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
ShowTaskExecutionByTask Displays a specific task execution.
**API Key Scope**: task_executions / show
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param taskId Numeric ID or name of task. Task names are not unique, it's recommanded to use numeric ID.
 * @param taskExecutionId Numeric ID of task execution.
@return TaskExecution
*/
func (a *TaskExecutionsApiService) ShowTaskExecutionByTask(ctx _context.Context, taskId string, taskExecutionId string) (TaskExecution, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  TaskExecution
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/tasks/{task_id}/task_executions/{task_execution_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"task_id"+"}", _neturl.QueryEscape(parameterToString(taskId, "")) , -1)

	localVarPath = strings.Replace(localVarPath, "{"+"task_execution_id"+"}", _neturl.QueryEscape(parameterToString(taskExecutionId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v TaskExecution
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
