/*
 * Nodeum API
 *
 * # About  This document describes the Nodeum API version 2:  If you are looking for any information about the product itself, reach the product website https://www.nodeum.io. You can also contact us at this email address : info@nodeum.io  # Filter parameters When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  
 *
 * API version: 2.1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package nodeum

import (
	"bytes"
	"encoding/json"
)

// TaskExecution struct for TaskExecution
type TaskExecution struct {
	Id *string `json:"id,omitempty"`
	TaskId *int32 `json:"task_id,omitempty"`
	Name *string `json:"name,omitempty"`
	WorkflowType *string `json:"workflow_type,omitempty"`
	WorkflowAction *string `json:"workflow_action,omitempty"`
	SourceType *string `json:"source_type,omitempty"`
	DestinationType *string `json:"destination_type,omitempty"`
	Status *string `json:"status,omitempty"`
	LogTime *string `json:"log_time,omitempty"`
	JobStarted *string `json:"job_started,omitempty"`
	JobFinished *string `json:"job_finished,omitempty"`
	ToProcessSize *int32 `json:"to_process_size,omitempty"`
	ProcessedSize *int32 `json:"processed_size,omitempty"`
	ToProcessFiles *int32 `json:"to_process_files,omitempty"`
	ProcessedFiles *int32 `json:"processed_files,omitempty"`
	FinalizedFiles *int32 `json:"finalized_files,omitempty"`
	EstimationTime *int32 `json:"estimation_time,omitempty"`
	Bandwidth *int32 `json:"bandwidth,omitempty"`
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TaskExecution) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *TaskExecution) GetIdOk() (string, bool) {
	if o == nil || o.Id == nil {
		var ret string
		return ret, false
	}
	return *o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TaskExecution) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *TaskExecution) SetId(v string) {
	o.Id = &v
}

// GetTaskId returns the TaskId field value if set, zero value otherwise.
func (o *TaskExecution) GetTaskId() int32 {
	if o == nil || o.TaskId == nil {
		var ret int32
		return ret
	}
	return *o.TaskId
}

// GetTaskIdOk returns a tuple with the TaskId field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *TaskExecution) GetTaskIdOk() (int32, bool) {
	if o == nil || o.TaskId == nil {
		var ret int32
		return ret, false
	}
	return *o.TaskId, true
}

// HasTaskId returns a boolean if a field has been set.
func (o *TaskExecution) HasTaskId() bool {
	if o != nil && o.TaskId != nil {
		return true
	}

	return false
}

// SetTaskId gets a reference to the given int32 and assigns it to the TaskId field.
func (o *TaskExecution) SetTaskId(v int32) {
	o.TaskId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *TaskExecution) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *TaskExecution) GetNameOk() (string, bool) {
	if o == nil || o.Name == nil {
		var ret string
		return ret, false
	}
	return *o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *TaskExecution) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *TaskExecution) SetName(v string) {
	o.Name = &v
}

// GetWorkflowType returns the WorkflowType field value if set, zero value otherwise.
func (o *TaskExecution) GetWorkflowType() string {
	if o == nil || o.WorkflowType == nil {
		var ret string
		return ret
	}
	return *o.WorkflowType
}

// GetWorkflowTypeOk returns a tuple with the WorkflowType field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *TaskExecution) GetWorkflowTypeOk() (string, bool) {
	if o == nil || o.WorkflowType == nil {
		var ret string
		return ret, false
	}
	return *o.WorkflowType, true
}

// HasWorkflowType returns a boolean if a field has been set.
func (o *TaskExecution) HasWorkflowType() bool {
	if o != nil && o.WorkflowType != nil {
		return true
	}

	return false
}

// SetWorkflowType gets a reference to the given string and assigns it to the WorkflowType field.
func (o *TaskExecution) SetWorkflowType(v string) {
	o.WorkflowType = &v
}

// GetWorkflowAction returns the WorkflowAction field value if set, zero value otherwise.
func (o *TaskExecution) GetWorkflowAction() string {
	if o == nil || o.WorkflowAction == nil {
		var ret string
		return ret
	}
	return *o.WorkflowAction
}

// GetWorkflowActionOk returns a tuple with the WorkflowAction field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *TaskExecution) GetWorkflowActionOk() (string, bool) {
	if o == nil || o.WorkflowAction == nil {
		var ret string
		return ret, false
	}
	return *o.WorkflowAction, true
}

// HasWorkflowAction returns a boolean if a field has been set.
func (o *TaskExecution) HasWorkflowAction() bool {
	if o != nil && o.WorkflowAction != nil {
		return true
	}

	return false
}

// SetWorkflowAction gets a reference to the given string and assigns it to the WorkflowAction field.
func (o *TaskExecution) SetWorkflowAction(v string) {
	o.WorkflowAction = &v
}

// GetSourceType returns the SourceType field value if set, zero value otherwise.
func (o *TaskExecution) GetSourceType() string {
	if o == nil || o.SourceType == nil {
		var ret string
		return ret
	}
	return *o.SourceType
}

// GetSourceTypeOk returns a tuple with the SourceType field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *TaskExecution) GetSourceTypeOk() (string, bool) {
	if o == nil || o.SourceType == nil {
		var ret string
		return ret, false
	}
	return *o.SourceType, true
}

// HasSourceType returns a boolean if a field has been set.
func (o *TaskExecution) HasSourceType() bool {
	if o != nil && o.SourceType != nil {
		return true
	}

	return false
}

// SetSourceType gets a reference to the given string and assigns it to the SourceType field.
func (o *TaskExecution) SetSourceType(v string) {
	o.SourceType = &v
}

// GetDestinationType returns the DestinationType field value if set, zero value otherwise.
func (o *TaskExecution) GetDestinationType() string {
	if o == nil || o.DestinationType == nil {
		var ret string
		return ret
	}
	return *o.DestinationType
}

// GetDestinationTypeOk returns a tuple with the DestinationType field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *TaskExecution) GetDestinationTypeOk() (string, bool) {
	if o == nil || o.DestinationType == nil {
		var ret string
		return ret, false
	}
	return *o.DestinationType, true
}

// HasDestinationType returns a boolean if a field has been set.
func (o *TaskExecution) HasDestinationType() bool {
	if o != nil && o.DestinationType != nil {
		return true
	}

	return false
}

// SetDestinationType gets a reference to the given string and assigns it to the DestinationType field.
func (o *TaskExecution) SetDestinationType(v string) {
	o.DestinationType = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *TaskExecution) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *TaskExecution) GetStatusOk() (string, bool) {
	if o == nil || o.Status == nil {
		var ret string
		return ret, false
	}
	return *o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *TaskExecution) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *TaskExecution) SetStatus(v string) {
	o.Status = &v
}

// GetLogTime returns the LogTime field value if set, zero value otherwise.
func (o *TaskExecution) GetLogTime() string {
	if o == nil || o.LogTime == nil {
		var ret string
		return ret
	}
	return *o.LogTime
}

// GetLogTimeOk returns a tuple with the LogTime field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *TaskExecution) GetLogTimeOk() (string, bool) {
	if o == nil || o.LogTime == nil {
		var ret string
		return ret, false
	}
	return *o.LogTime, true
}

// HasLogTime returns a boolean if a field has been set.
func (o *TaskExecution) HasLogTime() bool {
	if o != nil && o.LogTime != nil {
		return true
	}

	return false
}

// SetLogTime gets a reference to the given string and assigns it to the LogTime field.
func (o *TaskExecution) SetLogTime(v string) {
	o.LogTime = &v
}

// GetJobStarted returns the JobStarted field value if set, zero value otherwise.
func (o *TaskExecution) GetJobStarted() string {
	if o == nil || o.JobStarted == nil {
		var ret string
		return ret
	}
	return *o.JobStarted
}

// GetJobStartedOk returns a tuple with the JobStarted field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *TaskExecution) GetJobStartedOk() (string, bool) {
	if o == nil || o.JobStarted == nil {
		var ret string
		return ret, false
	}
	return *o.JobStarted, true
}

// HasJobStarted returns a boolean if a field has been set.
func (o *TaskExecution) HasJobStarted() bool {
	if o != nil && o.JobStarted != nil {
		return true
	}

	return false
}

// SetJobStarted gets a reference to the given string and assigns it to the JobStarted field.
func (o *TaskExecution) SetJobStarted(v string) {
	o.JobStarted = &v
}

// GetJobFinished returns the JobFinished field value if set, zero value otherwise.
func (o *TaskExecution) GetJobFinished() string {
	if o == nil || o.JobFinished == nil {
		var ret string
		return ret
	}
	return *o.JobFinished
}

// GetJobFinishedOk returns a tuple with the JobFinished field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *TaskExecution) GetJobFinishedOk() (string, bool) {
	if o == nil || o.JobFinished == nil {
		var ret string
		return ret, false
	}
	return *o.JobFinished, true
}

// HasJobFinished returns a boolean if a field has been set.
func (o *TaskExecution) HasJobFinished() bool {
	if o != nil && o.JobFinished != nil {
		return true
	}

	return false
}

// SetJobFinished gets a reference to the given string and assigns it to the JobFinished field.
func (o *TaskExecution) SetJobFinished(v string) {
	o.JobFinished = &v
}

// GetToProcessSize returns the ToProcessSize field value if set, zero value otherwise.
func (o *TaskExecution) GetToProcessSize() int32 {
	if o == nil || o.ToProcessSize == nil {
		var ret int32
		return ret
	}
	return *o.ToProcessSize
}

// GetToProcessSizeOk returns a tuple with the ToProcessSize field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *TaskExecution) GetToProcessSizeOk() (int32, bool) {
	if o == nil || o.ToProcessSize == nil {
		var ret int32
		return ret, false
	}
	return *o.ToProcessSize, true
}

// HasToProcessSize returns a boolean if a field has been set.
func (o *TaskExecution) HasToProcessSize() bool {
	if o != nil && o.ToProcessSize != nil {
		return true
	}

	return false
}

// SetToProcessSize gets a reference to the given int32 and assigns it to the ToProcessSize field.
func (o *TaskExecution) SetToProcessSize(v int32) {
	o.ToProcessSize = &v
}

// GetProcessedSize returns the ProcessedSize field value if set, zero value otherwise.
func (o *TaskExecution) GetProcessedSize() int32 {
	if o == nil || o.ProcessedSize == nil {
		var ret int32
		return ret
	}
	return *o.ProcessedSize
}

// GetProcessedSizeOk returns a tuple with the ProcessedSize field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *TaskExecution) GetProcessedSizeOk() (int32, bool) {
	if o == nil || o.ProcessedSize == nil {
		var ret int32
		return ret, false
	}
	return *o.ProcessedSize, true
}

// HasProcessedSize returns a boolean if a field has been set.
func (o *TaskExecution) HasProcessedSize() bool {
	if o != nil && o.ProcessedSize != nil {
		return true
	}

	return false
}

// SetProcessedSize gets a reference to the given int32 and assigns it to the ProcessedSize field.
func (o *TaskExecution) SetProcessedSize(v int32) {
	o.ProcessedSize = &v
}

// GetToProcessFiles returns the ToProcessFiles field value if set, zero value otherwise.
func (o *TaskExecution) GetToProcessFiles() int32 {
	if o == nil || o.ToProcessFiles == nil {
		var ret int32
		return ret
	}
	return *o.ToProcessFiles
}

// GetToProcessFilesOk returns a tuple with the ToProcessFiles field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *TaskExecution) GetToProcessFilesOk() (int32, bool) {
	if o == nil || o.ToProcessFiles == nil {
		var ret int32
		return ret, false
	}
	return *o.ToProcessFiles, true
}

// HasToProcessFiles returns a boolean if a field has been set.
func (o *TaskExecution) HasToProcessFiles() bool {
	if o != nil && o.ToProcessFiles != nil {
		return true
	}

	return false
}

// SetToProcessFiles gets a reference to the given int32 and assigns it to the ToProcessFiles field.
func (o *TaskExecution) SetToProcessFiles(v int32) {
	o.ToProcessFiles = &v
}

// GetProcessedFiles returns the ProcessedFiles field value if set, zero value otherwise.
func (o *TaskExecution) GetProcessedFiles() int32 {
	if o == nil || o.ProcessedFiles == nil {
		var ret int32
		return ret
	}
	return *o.ProcessedFiles
}

// GetProcessedFilesOk returns a tuple with the ProcessedFiles field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *TaskExecution) GetProcessedFilesOk() (int32, bool) {
	if o == nil || o.ProcessedFiles == nil {
		var ret int32
		return ret, false
	}
	return *o.ProcessedFiles, true
}

// HasProcessedFiles returns a boolean if a field has been set.
func (o *TaskExecution) HasProcessedFiles() bool {
	if o != nil && o.ProcessedFiles != nil {
		return true
	}

	return false
}

// SetProcessedFiles gets a reference to the given int32 and assigns it to the ProcessedFiles field.
func (o *TaskExecution) SetProcessedFiles(v int32) {
	o.ProcessedFiles = &v
}

// GetFinalizedFiles returns the FinalizedFiles field value if set, zero value otherwise.
func (o *TaskExecution) GetFinalizedFiles() int32 {
	if o == nil || o.FinalizedFiles == nil {
		var ret int32
		return ret
	}
	return *o.FinalizedFiles
}

// GetFinalizedFilesOk returns a tuple with the FinalizedFiles field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *TaskExecution) GetFinalizedFilesOk() (int32, bool) {
	if o == nil || o.FinalizedFiles == nil {
		var ret int32
		return ret, false
	}
	return *o.FinalizedFiles, true
}

// HasFinalizedFiles returns a boolean if a field has been set.
func (o *TaskExecution) HasFinalizedFiles() bool {
	if o != nil && o.FinalizedFiles != nil {
		return true
	}

	return false
}

// SetFinalizedFiles gets a reference to the given int32 and assigns it to the FinalizedFiles field.
func (o *TaskExecution) SetFinalizedFiles(v int32) {
	o.FinalizedFiles = &v
}

// GetEstimationTime returns the EstimationTime field value if set, zero value otherwise.
func (o *TaskExecution) GetEstimationTime() int32 {
	if o == nil || o.EstimationTime == nil {
		var ret int32
		return ret
	}
	return *o.EstimationTime
}

// GetEstimationTimeOk returns a tuple with the EstimationTime field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *TaskExecution) GetEstimationTimeOk() (int32, bool) {
	if o == nil || o.EstimationTime == nil {
		var ret int32
		return ret, false
	}
	return *o.EstimationTime, true
}

// HasEstimationTime returns a boolean if a field has been set.
func (o *TaskExecution) HasEstimationTime() bool {
	if o != nil && o.EstimationTime != nil {
		return true
	}

	return false
}

// SetEstimationTime gets a reference to the given int32 and assigns it to the EstimationTime field.
func (o *TaskExecution) SetEstimationTime(v int32) {
	o.EstimationTime = &v
}

// GetBandwidth returns the Bandwidth field value if set, zero value otherwise.
func (o *TaskExecution) GetBandwidth() int32 {
	if o == nil || o.Bandwidth == nil {
		var ret int32
		return ret
	}
	return *o.Bandwidth
}

// GetBandwidthOk returns a tuple with the Bandwidth field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *TaskExecution) GetBandwidthOk() (int32, bool) {
	if o == nil || o.Bandwidth == nil {
		var ret int32
		return ret, false
	}
	return *o.Bandwidth, true
}

// HasBandwidth returns a boolean if a field has been set.
func (o *TaskExecution) HasBandwidth() bool {
	if o != nil && o.Bandwidth != nil {
		return true
	}

	return false
}

// SetBandwidth gets a reference to the given int32 and assigns it to the Bandwidth field.
func (o *TaskExecution) SetBandwidth(v int32) {
	o.Bandwidth = &v
}

type NullableTaskExecution struct {
	Value TaskExecution
	ExplicitNull bool
}

func (v NullableTaskExecution) MarshalJSON() ([]byte, error) {
    switch {
    case v.ExplicitNull:
        return []byte("null"), nil
    default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableTaskExecution) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
