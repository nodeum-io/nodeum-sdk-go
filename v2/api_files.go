/*
 * Nodeum API
 *
 * # About  This document describes the Nodeum API version 2:  If you are looking for any information about the product itself, reach the product website https://www.nodeum.io. You can also contact us at this email address : info@nodeum.io  # Filter parameters When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  
 *
 * API version: 2.1.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package nodeum

import (
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"fmt"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ context.Context
)

type FilesApiService service

/* 
FilesApiService Lists files under a specific folder.
**API Key Scope**: files / index
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param fileParentId Numeric ID of parent folder.
 * @param optional nil or *FilesChildrenOpts - Optional Parameters:
     * @param "Limit" (optional.Int32) -  The number of items to display for pagination.
     * @param "Offset" (optional.Int32) -  The number of items to skip for pagination.
     * @param "FileId" (optional.String) -  Filter on file id
     * @param "Name" (optional.String) -  Filter on name
     * @param "Type_" (optional.String) -  Filter on type
     * @param "Permission" (optional.String) -  Filter on permission
     * @param "Size" (optional.String) -  Filter on size
     * @param "ChangeDate" (optional.String) -  Filter on change date
     * @param "ModificationDate" (optional.String) -  Filter on modification date
     * @param "AccessDate" (optional.String) -  Filter on access date
     * @param "Gid" (optional.String) -  Filter on gid
     * @param "Uid" (optional.String) -  Filter on uid

@return NodeumFileCollection
*/

type FilesChildrenOpts struct { 
	Limit optional.Int32
	Offset optional.Int32
	FileId optional.String
	Name optional.String
	Type_ optional.String
	Permission optional.String
	Size optional.String
	ChangeDate optional.String
	ModificationDate optional.String
	AccessDate optional.String
	Gid optional.String
	Uid optional.String
}

func (a *FilesApiService) FilesChildren(ctx context.Context, fileParentId int32, localVarOptionals *FilesChildrenOpts) (NodeumFileCollection, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue NodeumFileCollection
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/files/{file_parent_id}/children"
	localVarPath = strings.Replace(localVarPath, "{"+"file_parent_id"+"}", fmt.Sprintf("%v", fileParentId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.Limit.IsSet() {
		localVarQueryParams.Add("limit", parameterToString(localVarOptionals.Limit.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FileId.IsSet() {
		localVarQueryParams.Add("file_id", parameterToString(localVarOptionals.FileId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Name.IsSet() {
		localVarQueryParams.Add("name", parameterToString(localVarOptionals.Name.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Type_.IsSet() {
		localVarQueryParams.Add("type", parameterToString(localVarOptionals.Type_.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Permission.IsSet() {
		localVarQueryParams.Add("permission", parameterToString(localVarOptionals.Permission.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Size.IsSet() {
		localVarQueryParams.Add("size", parameterToString(localVarOptionals.Size.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ChangeDate.IsSet() {
		localVarQueryParams.Add("change_date", parameterToString(localVarOptionals.ChangeDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ModificationDate.IsSet() {
		localVarQueryParams.Add("modification_date", parameterToString(localVarOptionals.ModificationDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AccessDate.IsSet() {
		localVarQueryParams.Add("access_date", parameterToString(localVarOptionals.AccessDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Gid.IsSet() {
		localVarQueryParams.Add("gid", parameterToString(localVarOptionals.Gid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Uid.IsSet() {
		localVarQueryParams.Add("uid", parameterToString(localVarOptionals.Uid.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v NodeumFileCollection
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
FilesApiService Lists files under a specific folder.
**API Key Scope**: files / index
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param containerId Numeric ID or name of container.
 * @param fileParentId Numeric ID of parent folder.
 * @param optional nil or *FilesChildrenByContainerOpts - Optional Parameters:
     * @param "Limit" (optional.Int32) -  The number of items to display for pagination.
     * @param "Offset" (optional.Int32) -  The number of items to skip for pagination.
     * @param "FileId" (optional.String) -  Filter on file id
     * @param "Name" (optional.String) -  Filter on name
     * @param "Type_" (optional.String) -  Filter on type
     * @param "Permission" (optional.String) -  Filter on permission
     * @param "Size" (optional.String) -  Filter on size
     * @param "ChangeDate" (optional.String) -  Filter on change date
     * @param "ModificationDate" (optional.String) -  Filter on modification date
     * @param "AccessDate" (optional.String) -  Filter on access date
     * @param "Gid" (optional.String) -  Filter on gid
     * @param "Uid" (optional.String) -  Filter on uid

@return NodeumFileCollection
*/

type FilesChildrenByContainerOpts struct { 
	Limit optional.Int32
	Offset optional.Int32
	FileId optional.String
	Name optional.String
	Type_ optional.String
	Permission optional.String
	Size optional.String
	ChangeDate optional.String
	ModificationDate optional.String
	AccessDate optional.String
	Gid optional.String
	Uid optional.String
}

func (a *FilesApiService) FilesChildrenByContainer(ctx context.Context, containerId string, fileParentId int32, localVarOptionals *FilesChildrenByContainerOpts) (NodeumFileCollection, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue NodeumFileCollection
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/containers/{container_id}/files/{file_parent_id}/children"
	localVarPath = strings.Replace(localVarPath, "{"+"container_id"+"}", fmt.Sprintf("%v", containerId), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"file_parent_id"+"}", fmt.Sprintf("%v", fileParentId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.Limit.IsSet() {
		localVarQueryParams.Add("limit", parameterToString(localVarOptionals.Limit.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FileId.IsSet() {
		localVarQueryParams.Add("file_id", parameterToString(localVarOptionals.FileId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Name.IsSet() {
		localVarQueryParams.Add("name", parameterToString(localVarOptionals.Name.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Type_.IsSet() {
		localVarQueryParams.Add("type", parameterToString(localVarOptionals.Type_.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Permission.IsSet() {
		localVarQueryParams.Add("permission", parameterToString(localVarOptionals.Permission.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Size.IsSet() {
		localVarQueryParams.Add("size", parameterToString(localVarOptionals.Size.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ChangeDate.IsSet() {
		localVarQueryParams.Add("change_date", parameterToString(localVarOptionals.ChangeDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ModificationDate.IsSet() {
		localVarQueryParams.Add("modification_date", parameterToString(localVarOptionals.ModificationDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AccessDate.IsSet() {
		localVarQueryParams.Add("access_date", parameterToString(localVarOptionals.AccessDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Gid.IsSet() {
		localVarQueryParams.Add("gid", parameterToString(localVarOptionals.Gid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Uid.IsSet() {
		localVarQueryParams.Add("uid", parameterToString(localVarOptionals.Uid.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v NodeumFileCollection
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
FilesApiService Lists files under a specific folder.
**API Key Scope**: files / index
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param poolId Numeric ID, or name of pool.
 * @param fileParentId Numeric ID of parent folder.
 * @param optional nil or *FilesChildrenByPoolOpts - Optional Parameters:
     * @param "Limit" (optional.Int32) -  The number of items to display for pagination.
     * @param "Offset" (optional.Int32) -  The number of items to skip for pagination.
     * @param "FileId" (optional.String) -  Filter on file id
     * @param "Name" (optional.String) -  Filter on name
     * @param "Type_" (optional.String) -  Filter on type
     * @param "Permission" (optional.String) -  Filter on permission
     * @param "Size" (optional.String) -  Filter on size
     * @param "ChangeDate" (optional.String) -  Filter on change date
     * @param "ModificationDate" (optional.String) -  Filter on modification date
     * @param "AccessDate" (optional.String) -  Filter on access date
     * @param "Gid" (optional.String) -  Filter on gid
     * @param "Uid" (optional.String) -  Filter on uid

@return NodeumFileCollection
*/

type FilesChildrenByPoolOpts struct { 
	Limit optional.Int32
	Offset optional.Int32
	FileId optional.String
	Name optional.String
	Type_ optional.String
	Permission optional.String
	Size optional.String
	ChangeDate optional.String
	ModificationDate optional.String
	AccessDate optional.String
	Gid optional.String
	Uid optional.String
}

func (a *FilesApiService) FilesChildrenByPool(ctx context.Context, poolId string, fileParentId int32, localVarOptionals *FilesChildrenByPoolOpts) (NodeumFileCollection, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue NodeumFileCollection
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/pools/{pool_id}/files/{file_parent_id}/children"
	localVarPath = strings.Replace(localVarPath, "{"+"pool_id"+"}", fmt.Sprintf("%v", poolId), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"file_parent_id"+"}", fmt.Sprintf("%v", fileParentId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.Limit.IsSet() {
		localVarQueryParams.Add("limit", parameterToString(localVarOptionals.Limit.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FileId.IsSet() {
		localVarQueryParams.Add("file_id", parameterToString(localVarOptionals.FileId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Name.IsSet() {
		localVarQueryParams.Add("name", parameterToString(localVarOptionals.Name.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Type_.IsSet() {
		localVarQueryParams.Add("type", parameterToString(localVarOptionals.Type_.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Permission.IsSet() {
		localVarQueryParams.Add("permission", parameterToString(localVarOptionals.Permission.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Size.IsSet() {
		localVarQueryParams.Add("size", parameterToString(localVarOptionals.Size.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ChangeDate.IsSet() {
		localVarQueryParams.Add("change_date", parameterToString(localVarOptionals.ChangeDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ModificationDate.IsSet() {
		localVarQueryParams.Add("modification_date", parameterToString(localVarOptionals.ModificationDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AccessDate.IsSet() {
		localVarQueryParams.Add("access_date", parameterToString(localVarOptionals.AccessDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Gid.IsSet() {
		localVarQueryParams.Add("gid", parameterToString(localVarOptionals.Gid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Uid.IsSet() {
		localVarQueryParams.Add("uid", parameterToString(localVarOptionals.Uid.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v NodeumFileCollection
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
FilesApiService Lists files under a specific folder.
**API Key Scope**: files / index
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.
 * @param fileParentId Numeric ID of parent folder.
 * @param optional nil or *FilesChildrenByTaskOpts - Optional Parameters:
     * @param "Limit" (optional.Int32) -  The number of items to display for pagination.
     * @param "Offset" (optional.Int32) -  The number of items to skip for pagination.
     * @param "FileId" (optional.String) -  Filter on file id
     * @param "Name" (optional.String) -  Filter on name
     * @param "Type_" (optional.String) -  Filter on type
     * @param "Permission" (optional.String) -  Filter on permission
     * @param "Size" (optional.String) -  Filter on size
     * @param "ChangeDate" (optional.String) -  Filter on change date
     * @param "ModificationDate" (optional.String) -  Filter on modification date
     * @param "AccessDate" (optional.String) -  Filter on access date
     * @param "Gid" (optional.String) -  Filter on gid
     * @param "Uid" (optional.String) -  Filter on uid

@return NodeumFileCollection
*/

type FilesChildrenByTaskOpts struct { 
	Limit optional.Int32
	Offset optional.Int32
	FileId optional.String
	Name optional.String
	Type_ optional.String
	Permission optional.String
	Size optional.String
	ChangeDate optional.String
	ModificationDate optional.String
	AccessDate optional.String
	Gid optional.String
	Uid optional.String
}

func (a *FilesApiService) FilesChildrenByTask(ctx context.Context, taskId string, fileParentId int32, localVarOptionals *FilesChildrenByTaskOpts) (NodeumFileCollection, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue NodeumFileCollection
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/tasks/{task_id}/files/{file_parent_id}/children"
	localVarPath = strings.Replace(localVarPath, "{"+"task_id"+"}", fmt.Sprintf("%v", taskId), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"file_parent_id"+"}", fmt.Sprintf("%v", fileParentId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.Limit.IsSet() {
		localVarQueryParams.Add("limit", parameterToString(localVarOptionals.Limit.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FileId.IsSet() {
		localVarQueryParams.Add("file_id", parameterToString(localVarOptionals.FileId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Name.IsSet() {
		localVarQueryParams.Add("name", parameterToString(localVarOptionals.Name.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Type_.IsSet() {
		localVarQueryParams.Add("type", parameterToString(localVarOptionals.Type_.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Permission.IsSet() {
		localVarQueryParams.Add("permission", parameterToString(localVarOptionals.Permission.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Size.IsSet() {
		localVarQueryParams.Add("size", parameterToString(localVarOptionals.Size.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ChangeDate.IsSet() {
		localVarQueryParams.Add("change_date", parameterToString(localVarOptionals.ChangeDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ModificationDate.IsSet() {
		localVarQueryParams.Add("modification_date", parameterToString(localVarOptionals.ModificationDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AccessDate.IsSet() {
		localVarQueryParams.Add("access_date", parameterToString(localVarOptionals.AccessDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Gid.IsSet() {
		localVarQueryParams.Add("gid", parameterToString(localVarOptionals.Gid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Uid.IsSet() {
		localVarQueryParams.Add("uid", parameterToString(localVarOptionals.Uid.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v NodeumFileCollection
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
FilesApiService Lists files under a specific folder.
**API Key Scope**: files / index
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param taskExecutionId Numeric ID of task execution.
 * @param fileParentId Numeric ID of parent folder.
 * @param optional nil or *FilesChildrenByTaskExecutionOpts - Optional Parameters:
     * @param "Limit" (optional.Int32) -  The number of items to display for pagination.
     * @param "Offset" (optional.Int32) -  The number of items to skip for pagination.
     * @param "FileId" (optional.String) -  Filter on file id
     * @param "Name" (optional.String) -  Filter on name
     * @param "Type_" (optional.String) -  Filter on type
     * @param "Permission" (optional.String) -  Filter on permission
     * @param "Size" (optional.String) -  Filter on size
     * @param "ChangeDate" (optional.String) -  Filter on change date
     * @param "ModificationDate" (optional.String) -  Filter on modification date
     * @param "AccessDate" (optional.String) -  Filter on access date
     * @param "Gid" (optional.String) -  Filter on gid
     * @param "Uid" (optional.String) -  Filter on uid

@return NodeumFileCollection
*/

type FilesChildrenByTaskExecutionOpts struct { 
	Limit optional.Int32
	Offset optional.Int32
	FileId optional.String
	Name optional.String
	Type_ optional.String
	Permission optional.String
	Size optional.String
	ChangeDate optional.String
	ModificationDate optional.String
	AccessDate optional.String
	Gid optional.String
	Uid optional.String
}

func (a *FilesApiService) FilesChildrenByTaskExecution(ctx context.Context, taskExecutionId string, fileParentId int32, localVarOptionals *FilesChildrenByTaskExecutionOpts) (NodeumFileCollection, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue NodeumFileCollection
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/task_executions/{task_execution_id}/files/{file_parent_id}/children"
	localVarPath = strings.Replace(localVarPath, "{"+"task_execution_id"+"}", fmt.Sprintf("%v", taskExecutionId), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"file_parent_id"+"}", fmt.Sprintf("%v", fileParentId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.Limit.IsSet() {
		localVarQueryParams.Add("limit", parameterToString(localVarOptionals.Limit.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FileId.IsSet() {
		localVarQueryParams.Add("file_id", parameterToString(localVarOptionals.FileId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Name.IsSet() {
		localVarQueryParams.Add("name", parameterToString(localVarOptionals.Name.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Type_.IsSet() {
		localVarQueryParams.Add("type", parameterToString(localVarOptionals.Type_.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Permission.IsSet() {
		localVarQueryParams.Add("permission", parameterToString(localVarOptionals.Permission.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Size.IsSet() {
		localVarQueryParams.Add("size", parameterToString(localVarOptionals.Size.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ChangeDate.IsSet() {
		localVarQueryParams.Add("change_date", parameterToString(localVarOptionals.ChangeDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ModificationDate.IsSet() {
		localVarQueryParams.Add("modification_date", parameterToString(localVarOptionals.ModificationDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AccessDate.IsSet() {
		localVarQueryParams.Add("access_date", parameterToString(localVarOptionals.AccessDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Gid.IsSet() {
		localVarQueryParams.Add("gid", parameterToString(localVarOptionals.Gid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Uid.IsSet() {
		localVarQueryParams.Add("uid", parameterToString(localVarOptionals.Uid.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v NodeumFileCollection
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
FilesApiService Lists files under a specific folder.
**API Key Scope**: files / index
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.
 * @param taskExecutionId Numeric ID of task execution.
 * @param fileParentId Numeric ID of parent folder.
 * @param optional nil or *FilesChildrenByTaskExecutionByTaskOpts - Optional Parameters:
     * @param "Limit" (optional.Int32) -  The number of items to display for pagination.
     * @param "Offset" (optional.Int32) -  The number of items to skip for pagination.
     * @param "FileId" (optional.String) -  Filter on file id
     * @param "Name" (optional.String) -  Filter on name
     * @param "Type_" (optional.String) -  Filter on type
     * @param "Permission" (optional.String) -  Filter on permission
     * @param "Size" (optional.String) -  Filter on size
     * @param "ChangeDate" (optional.String) -  Filter on change date
     * @param "ModificationDate" (optional.String) -  Filter on modification date
     * @param "AccessDate" (optional.String) -  Filter on access date
     * @param "Gid" (optional.String) -  Filter on gid
     * @param "Uid" (optional.String) -  Filter on uid

@return NodeumFileCollection
*/

type FilesChildrenByTaskExecutionByTaskOpts struct { 
	Limit optional.Int32
	Offset optional.Int32
	FileId optional.String
	Name optional.String
	Type_ optional.String
	Permission optional.String
	Size optional.String
	ChangeDate optional.String
	ModificationDate optional.String
	AccessDate optional.String
	Gid optional.String
	Uid optional.String
}

func (a *FilesApiService) FilesChildrenByTaskExecutionByTask(ctx context.Context, taskId string, taskExecutionId string, fileParentId int32, localVarOptionals *FilesChildrenByTaskExecutionByTaskOpts) (NodeumFileCollection, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue NodeumFileCollection
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/tasks/{task_id}/task_executions/{task_execution_id}/files/{file_parent_id}/children"
	localVarPath = strings.Replace(localVarPath, "{"+"task_id"+"}", fmt.Sprintf("%v", taskId), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"task_execution_id"+"}", fmt.Sprintf("%v", taskExecutionId), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"file_parent_id"+"}", fmt.Sprintf("%v", fileParentId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.Limit.IsSet() {
		localVarQueryParams.Add("limit", parameterToString(localVarOptionals.Limit.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FileId.IsSet() {
		localVarQueryParams.Add("file_id", parameterToString(localVarOptionals.FileId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Name.IsSet() {
		localVarQueryParams.Add("name", parameterToString(localVarOptionals.Name.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Type_.IsSet() {
		localVarQueryParams.Add("type", parameterToString(localVarOptionals.Type_.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Permission.IsSet() {
		localVarQueryParams.Add("permission", parameterToString(localVarOptionals.Permission.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Size.IsSet() {
		localVarQueryParams.Add("size", parameterToString(localVarOptionals.Size.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ChangeDate.IsSet() {
		localVarQueryParams.Add("change_date", parameterToString(localVarOptionals.ChangeDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ModificationDate.IsSet() {
		localVarQueryParams.Add("modification_date", parameterToString(localVarOptionals.ModificationDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AccessDate.IsSet() {
		localVarQueryParams.Add("access_date", parameterToString(localVarOptionals.AccessDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Gid.IsSet() {
		localVarQueryParams.Add("gid", parameterToString(localVarOptionals.Gid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Uid.IsSet() {
		localVarQueryParams.Add("uid", parameterToString(localVarOptionals.Uid.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v NodeumFileCollection
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
FilesApiService Lists files under a specific folder on tape of pools, specific for Data Exchange.
**API Key Scope**: import_files / index
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param poolId Numeric ID, or name of pool.
 * @param fileParentId Numeric ID of parent folder.
 * @param optional nil or *ImportFilesChildrenByPoolOpts - Optional Parameters:
     * @param "Limit" (optional.Int32) -  The number of items to display for pagination.
     * @param "Offset" (optional.Int32) -  The number of items to skip for pagination.
     * @param "FileId" (optional.String) -  Filter on file id
     * @param "Name" (optional.String) -  Filter on name
     * @param "Type_" (optional.String) -  Filter on type
     * @param "Permission" (optional.String) -  Filter on permission
     * @param "Size" (optional.String) -  Filter on size
     * @param "ChangeDate" (optional.String) -  Filter on change date
     * @param "ModificationDate" (optional.String) -  Filter on modification date
     * @param "AccessDate" (optional.String) -  Filter on access date
     * @param "Gid" (optional.String) -  Filter on gid
     * @param "Uid" (optional.String) -  Filter on uid

@return ImportFileCollection
*/

type ImportFilesChildrenByPoolOpts struct { 
	Limit optional.Int32
	Offset optional.Int32
	FileId optional.String
	Name optional.String
	Type_ optional.String
	Permission optional.String
	Size optional.String
	ChangeDate optional.String
	ModificationDate optional.String
	AccessDate optional.String
	Gid optional.String
	Uid optional.String
}

func (a *FilesApiService) ImportFilesChildrenByPool(ctx context.Context, poolId string, fileParentId int32, localVarOptionals *ImportFilesChildrenByPoolOpts) (ImportFileCollection, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ImportFileCollection
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/pools/{pool_id}/import_files/{file_parent_id}/children"
	localVarPath = strings.Replace(localVarPath, "{"+"pool_id"+"}", fmt.Sprintf("%v", poolId), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"file_parent_id"+"}", fmt.Sprintf("%v", fileParentId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.Limit.IsSet() {
		localVarQueryParams.Add("limit", parameterToString(localVarOptionals.Limit.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FileId.IsSet() {
		localVarQueryParams.Add("file_id", parameterToString(localVarOptionals.FileId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Name.IsSet() {
		localVarQueryParams.Add("name", parameterToString(localVarOptionals.Name.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Type_.IsSet() {
		localVarQueryParams.Add("type", parameterToString(localVarOptionals.Type_.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Permission.IsSet() {
		localVarQueryParams.Add("permission", parameterToString(localVarOptionals.Permission.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Size.IsSet() {
		localVarQueryParams.Add("size", parameterToString(localVarOptionals.Size.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ChangeDate.IsSet() {
		localVarQueryParams.Add("change_date", parameterToString(localVarOptionals.ChangeDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ModificationDate.IsSet() {
		localVarQueryParams.Add("modification_date", parameterToString(localVarOptionals.ModificationDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AccessDate.IsSet() {
		localVarQueryParams.Add("access_date", parameterToString(localVarOptionals.AccessDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Gid.IsSet() {
		localVarQueryParams.Add("gid", parameterToString(localVarOptionals.Gid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Uid.IsSet() {
		localVarQueryParams.Add("uid", parameterToString(localVarOptionals.Uid.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v ImportFileCollection
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
FilesApiService Lists files on root.
**API Key Scope**: files / index
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *IndexFilesOpts - Optional Parameters:
     * @param "Limit" (optional.Int32) -  The number of items to display for pagination.
     * @param "Offset" (optional.Int32) -  The number of items to skip for pagination.
     * @param "FileId" (optional.String) -  Filter on file id
     * @param "Name" (optional.String) -  Filter on name
     * @param "Type_" (optional.String) -  Filter on type
     * @param "Permission" (optional.String) -  Filter on permission
     * @param "Size" (optional.String) -  Filter on size
     * @param "ChangeDate" (optional.String) -  Filter on change date
     * @param "ModificationDate" (optional.String) -  Filter on modification date
     * @param "AccessDate" (optional.String) -  Filter on access date
     * @param "Gid" (optional.String) -  Filter on gid
     * @param "Uid" (optional.String) -  Filter on uid

@return NodeumFileCollection
*/

type IndexFilesOpts struct { 
	Limit optional.Int32
	Offset optional.Int32
	FileId optional.String
	Name optional.String
	Type_ optional.String
	Permission optional.String
	Size optional.String
	ChangeDate optional.String
	ModificationDate optional.String
	AccessDate optional.String
	Gid optional.String
	Uid optional.String
}

func (a *FilesApiService) IndexFiles(ctx context.Context, localVarOptionals *IndexFilesOpts) (NodeumFileCollection, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue NodeumFileCollection
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/files"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.Limit.IsSet() {
		localVarQueryParams.Add("limit", parameterToString(localVarOptionals.Limit.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FileId.IsSet() {
		localVarQueryParams.Add("file_id", parameterToString(localVarOptionals.FileId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Name.IsSet() {
		localVarQueryParams.Add("name", parameterToString(localVarOptionals.Name.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Type_.IsSet() {
		localVarQueryParams.Add("type", parameterToString(localVarOptionals.Type_.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Permission.IsSet() {
		localVarQueryParams.Add("permission", parameterToString(localVarOptionals.Permission.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Size.IsSet() {
		localVarQueryParams.Add("size", parameterToString(localVarOptionals.Size.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ChangeDate.IsSet() {
		localVarQueryParams.Add("change_date", parameterToString(localVarOptionals.ChangeDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ModificationDate.IsSet() {
		localVarQueryParams.Add("modification_date", parameterToString(localVarOptionals.ModificationDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AccessDate.IsSet() {
		localVarQueryParams.Add("access_date", parameterToString(localVarOptionals.AccessDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Gid.IsSet() {
		localVarQueryParams.Add("gid", parameterToString(localVarOptionals.Gid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Uid.IsSet() {
		localVarQueryParams.Add("uid", parameterToString(localVarOptionals.Uid.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v NodeumFileCollection
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
FilesApiService Lists files on root.
**API Key Scope**: files / index
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param containerId Numeric ID or name of container.
 * @param optional nil or *IndexFilesByContainerOpts - Optional Parameters:
     * @param "Limit" (optional.Int32) -  The number of items to display for pagination.
     * @param "Offset" (optional.Int32) -  The number of items to skip for pagination.
     * @param "FileId" (optional.String) -  Filter on file id
     * @param "Name" (optional.String) -  Filter on name
     * @param "Type_" (optional.String) -  Filter on type
     * @param "Permission" (optional.String) -  Filter on permission
     * @param "Size" (optional.String) -  Filter on size
     * @param "ChangeDate" (optional.String) -  Filter on change date
     * @param "ModificationDate" (optional.String) -  Filter on modification date
     * @param "AccessDate" (optional.String) -  Filter on access date
     * @param "Gid" (optional.String) -  Filter on gid
     * @param "Uid" (optional.String) -  Filter on uid

@return NodeumFileCollection
*/

type IndexFilesByContainerOpts struct { 
	Limit optional.Int32
	Offset optional.Int32
	FileId optional.String
	Name optional.String
	Type_ optional.String
	Permission optional.String
	Size optional.String
	ChangeDate optional.String
	ModificationDate optional.String
	AccessDate optional.String
	Gid optional.String
	Uid optional.String
}

func (a *FilesApiService) IndexFilesByContainer(ctx context.Context, containerId string, localVarOptionals *IndexFilesByContainerOpts) (NodeumFileCollection, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue NodeumFileCollection
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/containers/{container_id}/files"
	localVarPath = strings.Replace(localVarPath, "{"+"container_id"+"}", fmt.Sprintf("%v", containerId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.Limit.IsSet() {
		localVarQueryParams.Add("limit", parameterToString(localVarOptionals.Limit.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FileId.IsSet() {
		localVarQueryParams.Add("file_id", parameterToString(localVarOptionals.FileId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Name.IsSet() {
		localVarQueryParams.Add("name", parameterToString(localVarOptionals.Name.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Type_.IsSet() {
		localVarQueryParams.Add("type", parameterToString(localVarOptionals.Type_.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Permission.IsSet() {
		localVarQueryParams.Add("permission", parameterToString(localVarOptionals.Permission.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Size.IsSet() {
		localVarQueryParams.Add("size", parameterToString(localVarOptionals.Size.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ChangeDate.IsSet() {
		localVarQueryParams.Add("change_date", parameterToString(localVarOptionals.ChangeDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ModificationDate.IsSet() {
		localVarQueryParams.Add("modification_date", parameterToString(localVarOptionals.ModificationDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AccessDate.IsSet() {
		localVarQueryParams.Add("access_date", parameterToString(localVarOptionals.AccessDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Gid.IsSet() {
		localVarQueryParams.Add("gid", parameterToString(localVarOptionals.Gid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Uid.IsSet() {
		localVarQueryParams.Add("uid", parameterToString(localVarOptionals.Uid.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v NodeumFileCollection
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
FilesApiService Lists files on root.
**API Key Scope**: files / index
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param poolId Numeric ID, or name of pool.
 * @param optional nil or *IndexFilesByPoolOpts - Optional Parameters:
     * @param "Limit" (optional.Int32) -  The number of items to display for pagination.
     * @param "Offset" (optional.Int32) -  The number of items to skip for pagination.
     * @param "FileId" (optional.String) -  Filter on file id
     * @param "Name" (optional.String) -  Filter on name
     * @param "Type_" (optional.String) -  Filter on type
     * @param "Permission" (optional.String) -  Filter on permission
     * @param "Size" (optional.String) -  Filter on size
     * @param "ChangeDate" (optional.String) -  Filter on change date
     * @param "ModificationDate" (optional.String) -  Filter on modification date
     * @param "AccessDate" (optional.String) -  Filter on access date
     * @param "Gid" (optional.String) -  Filter on gid
     * @param "Uid" (optional.String) -  Filter on uid

@return NodeumFileCollection
*/

type IndexFilesByPoolOpts struct { 
	Limit optional.Int32
	Offset optional.Int32
	FileId optional.String
	Name optional.String
	Type_ optional.String
	Permission optional.String
	Size optional.String
	ChangeDate optional.String
	ModificationDate optional.String
	AccessDate optional.String
	Gid optional.String
	Uid optional.String
}

func (a *FilesApiService) IndexFilesByPool(ctx context.Context, poolId string, localVarOptionals *IndexFilesByPoolOpts) (NodeumFileCollection, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue NodeumFileCollection
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/pools/{pool_id}/files"
	localVarPath = strings.Replace(localVarPath, "{"+"pool_id"+"}", fmt.Sprintf("%v", poolId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.Limit.IsSet() {
		localVarQueryParams.Add("limit", parameterToString(localVarOptionals.Limit.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FileId.IsSet() {
		localVarQueryParams.Add("file_id", parameterToString(localVarOptionals.FileId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Name.IsSet() {
		localVarQueryParams.Add("name", parameterToString(localVarOptionals.Name.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Type_.IsSet() {
		localVarQueryParams.Add("type", parameterToString(localVarOptionals.Type_.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Permission.IsSet() {
		localVarQueryParams.Add("permission", parameterToString(localVarOptionals.Permission.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Size.IsSet() {
		localVarQueryParams.Add("size", parameterToString(localVarOptionals.Size.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ChangeDate.IsSet() {
		localVarQueryParams.Add("change_date", parameterToString(localVarOptionals.ChangeDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ModificationDate.IsSet() {
		localVarQueryParams.Add("modification_date", parameterToString(localVarOptionals.ModificationDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AccessDate.IsSet() {
		localVarQueryParams.Add("access_date", parameterToString(localVarOptionals.AccessDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Gid.IsSet() {
		localVarQueryParams.Add("gid", parameterToString(localVarOptionals.Gid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Uid.IsSet() {
		localVarQueryParams.Add("uid", parameterToString(localVarOptionals.Uid.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v NodeumFileCollection
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
FilesApiService Lists files on root.
**API Key Scope**: files / index
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.
 * @param optional nil or *IndexFilesByTaskOpts - Optional Parameters:
     * @param "Limit" (optional.Int32) -  The number of items to display for pagination.
     * @param "Offset" (optional.Int32) -  The number of items to skip for pagination.
     * @param "FileId" (optional.String) -  Filter on file id
     * @param "Name" (optional.String) -  Filter on name
     * @param "Type_" (optional.String) -  Filter on type
     * @param "Permission" (optional.String) -  Filter on permission
     * @param "Size" (optional.String) -  Filter on size
     * @param "ChangeDate" (optional.String) -  Filter on change date
     * @param "ModificationDate" (optional.String) -  Filter on modification date
     * @param "AccessDate" (optional.String) -  Filter on access date
     * @param "Gid" (optional.String) -  Filter on gid
     * @param "Uid" (optional.String) -  Filter on uid

@return NodeumFileCollection
*/

type IndexFilesByTaskOpts struct { 
	Limit optional.Int32
	Offset optional.Int32
	FileId optional.String
	Name optional.String
	Type_ optional.String
	Permission optional.String
	Size optional.String
	ChangeDate optional.String
	ModificationDate optional.String
	AccessDate optional.String
	Gid optional.String
	Uid optional.String
}

func (a *FilesApiService) IndexFilesByTask(ctx context.Context, taskId string, localVarOptionals *IndexFilesByTaskOpts) (NodeumFileCollection, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue NodeumFileCollection
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/tasks/{task_id}/files"
	localVarPath = strings.Replace(localVarPath, "{"+"task_id"+"}", fmt.Sprintf("%v", taskId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.Limit.IsSet() {
		localVarQueryParams.Add("limit", parameterToString(localVarOptionals.Limit.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FileId.IsSet() {
		localVarQueryParams.Add("file_id", parameterToString(localVarOptionals.FileId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Name.IsSet() {
		localVarQueryParams.Add("name", parameterToString(localVarOptionals.Name.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Type_.IsSet() {
		localVarQueryParams.Add("type", parameterToString(localVarOptionals.Type_.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Permission.IsSet() {
		localVarQueryParams.Add("permission", parameterToString(localVarOptionals.Permission.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Size.IsSet() {
		localVarQueryParams.Add("size", parameterToString(localVarOptionals.Size.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ChangeDate.IsSet() {
		localVarQueryParams.Add("change_date", parameterToString(localVarOptionals.ChangeDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ModificationDate.IsSet() {
		localVarQueryParams.Add("modification_date", parameterToString(localVarOptionals.ModificationDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AccessDate.IsSet() {
		localVarQueryParams.Add("access_date", parameterToString(localVarOptionals.AccessDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Gid.IsSet() {
		localVarQueryParams.Add("gid", parameterToString(localVarOptionals.Gid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Uid.IsSet() {
		localVarQueryParams.Add("uid", parameterToString(localVarOptionals.Uid.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v NodeumFileCollection
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
FilesApiService Lists files on root.
**API Key Scope**: files / index
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param taskExecutionId Numeric ID of task execution.
 * @param optional nil or *IndexFilesByTaskExecutionOpts - Optional Parameters:
     * @param "Limit" (optional.Int32) -  The number of items to display for pagination.
     * @param "Offset" (optional.Int32) -  The number of items to skip for pagination.
     * @param "FileId" (optional.String) -  Filter on file id
     * @param "Name" (optional.String) -  Filter on name
     * @param "Type_" (optional.String) -  Filter on type
     * @param "Permission" (optional.String) -  Filter on permission
     * @param "Size" (optional.String) -  Filter on size
     * @param "ChangeDate" (optional.String) -  Filter on change date
     * @param "ModificationDate" (optional.String) -  Filter on modification date
     * @param "AccessDate" (optional.String) -  Filter on access date
     * @param "Gid" (optional.String) -  Filter on gid
     * @param "Uid" (optional.String) -  Filter on uid

@return NodeumFileCollection
*/

type IndexFilesByTaskExecutionOpts struct { 
	Limit optional.Int32
	Offset optional.Int32
	FileId optional.String
	Name optional.String
	Type_ optional.String
	Permission optional.String
	Size optional.String
	ChangeDate optional.String
	ModificationDate optional.String
	AccessDate optional.String
	Gid optional.String
	Uid optional.String
}

func (a *FilesApiService) IndexFilesByTaskExecution(ctx context.Context, taskExecutionId string, localVarOptionals *IndexFilesByTaskExecutionOpts) (NodeumFileCollection, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue NodeumFileCollection
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/task_executions/{task_execution_id}/files"
	localVarPath = strings.Replace(localVarPath, "{"+"task_execution_id"+"}", fmt.Sprintf("%v", taskExecutionId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.Limit.IsSet() {
		localVarQueryParams.Add("limit", parameterToString(localVarOptionals.Limit.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FileId.IsSet() {
		localVarQueryParams.Add("file_id", parameterToString(localVarOptionals.FileId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Name.IsSet() {
		localVarQueryParams.Add("name", parameterToString(localVarOptionals.Name.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Type_.IsSet() {
		localVarQueryParams.Add("type", parameterToString(localVarOptionals.Type_.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Permission.IsSet() {
		localVarQueryParams.Add("permission", parameterToString(localVarOptionals.Permission.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Size.IsSet() {
		localVarQueryParams.Add("size", parameterToString(localVarOptionals.Size.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ChangeDate.IsSet() {
		localVarQueryParams.Add("change_date", parameterToString(localVarOptionals.ChangeDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ModificationDate.IsSet() {
		localVarQueryParams.Add("modification_date", parameterToString(localVarOptionals.ModificationDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AccessDate.IsSet() {
		localVarQueryParams.Add("access_date", parameterToString(localVarOptionals.AccessDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Gid.IsSet() {
		localVarQueryParams.Add("gid", parameterToString(localVarOptionals.Gid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Uid.IsSet() {
		localVarQueryParams.Add("uid", parameterToString(localVarOptionals.Uid.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v NodeumFileCollection
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
FilesApiService Lists files on root.
**API Key Scope**: files / index
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.
 * @param taskExecutionId Numeric ID of task execution.
 * @param optional nil or *IndexFilesByTaskExecutionByTaskOpts - Optional Parameters:
     * @param "Limit" (optional.Int32) -  The number of items to display for pagination.
     * @param "Offset" (optional.Int32) -  The number of items to skip for pagination.
     * @param "FileId" (optional.String) -  Filter on file id
     * @param "Name" (optional.String) -  Filter on name
     * @param "Type_" (optional.String) -  Filter on type
     * @param "Permission" (optional.String) -  Filter on permission
     * @param "Size" (optional.String) -  Filter on size
     * @param "ChangeDate" (optional.String) -  Filter on change date
     * @param "ModificationDate" (optional.String) -  Filter on modification date
     * @param "AccessDate" (optional.String) -  Filter on access date
     * @param "Gid" (optional.String) -  Filter on gid
     * @param "Uid" (optional.String) -  Filter on uid

@return NodeumFileCollection
*/

type IndexFilesByTaskExecutionByTaskOpts struct { 
	Limit optional.Int32
	Offset optional.Int32
	FileId optional.String
	Name optional.String
	Type_ optional.String
	Permission optional.String
	Size optional.String
	ChangeDate optional.String
	ModificationDate optional.String
	AccessDate optional.String
	Gid optional.String
	Uid optional.String
}

func (a *FilesApiService) IndexFilesByTaskExecutionByTask(ctx context.Context, taskId string, taskExecutionId string, localVarOptionals *IndexFilesByTaskExecutionByTaskOpts) (NodeumFileCollection, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue NodeumFileCollection
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/tasks/{task_id}/task_executions/{task_execution_id}/files"
	localVarPath = strings.Replace(localVarPath, "{"+"task_id"+"}", fmt.Sprintf("%v", taskId), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"task_execution_id"+"}", fmt.Sprintf("%v", taskExecutionId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.Limit.IsSet() {
		localVarQueryParams.Add("limit", parameterToString(localVarOptionals.Limit.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FileId.IsSet() {
		localVarQueryParams.Add("file_id", parameterToString(localVarOptionals.FileId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Name.IsSet() {
		localVarQueryParams.Add("name", parameterToString(localVarOptionals.Name.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Type_.IsSet() {
		localVarQueryParams.Add("type", parameterToString(localVarOptionals.Type_.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Permission.IsSet() {
		localVarQueryParams.Add("permission", parameterToString(localVarOptionals.Permission.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Size.IsSet() {
		localVarQueryParams.Add("size", parameterToString(localVarOptionals.Size.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ChangeDate.IsSet() {
		localVarQueryParams.Add("change_date", parameterToString(localVarOptionals.ChangeDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ModificationDate.IsSet() {
		localVarQueryParams.Add("modification_date", parameterToString(localVarOptionals.ModificationDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AccessDate.IsSet() {
		localVarQueryParams.Add("access_date", parameterToString(localVarOptionals.AccessDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Gid.IsSet() {
		localVarQueryParams.Add("gid", parameterToString(localVarOptionals.Gid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Uid.IsSet() {
		localVarQueryParams.Add("uid", parameterToString(localVarOptionals.Uid.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v NodeumFileCollection
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
FilesApiService Lists files on root of tape of pools, specific for Data Exchange.
**API Key Scope**: import_files / index
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param poolId Numeric ID, or name of pool.
 * @param optional nil or *IndexImportFilesByPoolOpts - Optional Parameters:
     * @param "Limit" (optional.Int32) -  The number of items to display for pagination.
     * @param "Offset" (optional.Int32) -  The number of items to skip for pagination.
     * @param "FileId" (optional.String) -  Filter on file id
     * @param "Name" (optional.String) -  Filter on name
     * @param "Type_" (optional.String) -  Filter on type
     * @param "Permission" (optional.String) -  Filter on permission
     * @param "Size" (optional.String) -  Filter on size
     * @param "ChangeDate" (optional.String) -  Filter on change date
     * @param "ModificationDate" (optional.String) -  Filter on modification date
     * @param "AccessDate" (optional.String) -  Filter on access date
     * @param "Gid" (optional.String) -  Filter on gid
     * @param "Uid" (optional.String) -  Filter on uid

@return ImportFileCollection
*/

type IndexImportFilesByPoolOpts struct { 
	Limit optional.Int32
	Offset optional.Int32
	FileId optional.String
	Name optional.String
	Type_ optional.String
	Permission optional.String
	Size optional.String
	ChangeDate optional.String
	ModificationDate optional.String
	AccessDate optional.String
	Gid optional.String
	Uid optional.String
}

func (a *FilesApiService) IndexImportFilesByPool(ctx context.Context, poolId string, localVarOptionals *IndexImportFilesByPoolOpts) (ImportFileCollection, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ImportFileCollection
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/pools/{pool_id}/import_files"
	localVarPath = strings.Replace(localVarPath, "{"+"pool_id"+"}", fmt.Sprintf("%v", poolId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.Limit.IsSet() {
		localVarQueryParams.Add("limit", parameterToString(localVarOptionals.Limit.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FileId.IsSet() {
		localVarQueryParams.Add("file_id", parameterToString(localVarOptionals.FileId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Name.IsSet() {
		localVarQueryParams.Add("name", parameterToString(localVarOptionals.Name.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Type_.IsSet() {
		localVarQueryParams.Add("type", parameterToString(localVarOptionals.Type_.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Permission.IsSet() {
		localVarQueryParams.Add("permission", parameterToString(localVarOptionals.Permission.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Size.IsSet() {
		localVarQueryParams.Add("size", parameterToString(localVarOptionals.Size.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ChangeDate.IsSet() {
		localVarQueryParams.Add("change_date", parameterToString(localVarOptionals.ChangeDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ModificationDate.IsSet() {
		localVarQueryParams.Add("modification_date", parameterToString(localVarOptionals.ModificationDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AccessDate.IsSet() {
		localVarQueryParams.Add("access_date", parameterToString(localVarOptionals.AccessDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Gid.IsSet() {
		localVarQueryParams.Add("gid", parameterToString(localVarOptionals.Gid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Uid.IsSet() {
		localVarQueryParams.Add("uid", parameterToString(localVarOptionals.Uid.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v ImportFileCollection
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
FilesApiService Lists files on root of tape of pools, specific for Active and Offline.
**API Key Scope**: on_tapes_files / index
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param poolId Numeric ID, or name of pool.
 * @param optional nil or *IndexOnTapesFilesByPoolOpts - Optional Parameters:
     * @param "Limit" (optional.Int32) -  The number of items to display for pagination.
     * @param "Offset" (optional.Int32) -  The number of items to skip for pagination.
     * @param "Name" (optional.String) -  Filter on name
     * @param "Type_" (optional.String) -  Filter on type
     * @param "Size" (optional.String) -  Filter on size

@return OnTapesFileCollection
*/

type IndexOnTapesFilesByPoolOpts struct { 
	Limit optional.Int32
	Offset optional.Int32
	Name optional.String
	Type_ optional.String
	Size optional.String
}

func (a *FilesApiService) IndexOnTapesFilesByPool(ctx context.Context, poolId string, localVarOptionals *IndexOnTapesFilesByPoolOpts) (OnTapesFileCollection, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue OnTapesFileCollection
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/pools/{pool_id}/on_tapes_files"
	localVarPath = strings.Replace(localVarPath, "{"+"pool_id"+"}", fmt.Sprintf("%v", poolId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.Limit.IsSet() {
		localVarQueryParams.Add("limit", parameterToString(localVarOptionals.Limit.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Name.IsSet() {
		localVarQueryParams.Add("name", parameterToString(localVarOptionals.Name.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Type_.IsSet() {
		localVarQueryParams.Add("type", parameterToString(localVarOptionals.Type_.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Size.IsSet() {
		localVarQueryParams.Add("size", parameterToString(localVarOptionals.Size.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v OnTapesFileCollection
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
FilesApiService Lists files under a specific folder on tape of pools, specific for Active and Offline.
**API Key Scope**: on_tapes_files / index
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param poolId Numeric ID, or name of pool.
 * @param fileParentId Numeric ID of parent folder.
 * @param optional nil or *OnTapesFilesChildrenByPoolOpts - Optional Parameters:
     * @param "Limit" (optional.Int32) -  The number of items to display for pagination.
     * @param "Offset" (optional.Int32) -  The number of items to skip for pagination.
     * @param "Name" (optional.String) -  Filter on name
     * @param "Type_" (optional.String) -  Filter on type
     * @param "Size" (optional.String) -  Filter on size

@return OnTapesFileCollection
*/

type OnTapesFilesChildrenByPoolOpts struct { 
	Limit optional.Int32
	Offset optional.Int32
	Name optional.String
	Type_ optional.String
	Size optional.String
}

func (a *FilesApiService) OnTapesFilesChildrenByPool(ctx context.Context, poolId string, fileParentId int32, localVarOptionals *OnTapesFilesChildrenByPoolOpts) (OnTapesFileCollection, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue OnTapesFileCollection
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/pools/{pool_id}/on_tapes_files/{file_parent_id}/children"
	localVarPath = strings.Replace(localVarPath, "{"+"pool_id"+"}", fmt.Sprintf("%v", poolId), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"file_parent_id"+"}", fmt.Sprintf("%v", fileParentId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.Limit.IsSet() {
		localVarQueryParams.Add("limit", parameterToString(localVarOptionals.Limit.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Name.IsSet() {
		localVarQueryParams.Add("name", parameterToString(localVarOptionals.Name.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Type_.IsSet() {
		localVarQueryParams.Add("type", parameterToString(localVarOptionals.Type_.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Size.IsSet() {
		localVarQueryParams.Add("size", parameterToString(localVarOptionals.Size.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v OnTapesFileCollection
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
FilesApiService Displays a specific file.
**API Key Scope**: files / show
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param fileId Numeric ID of file.

@return NodeumFileWithPath
*/
func (a *FilesApiService) ShowFile(ctx context.Context, fileId int32) (NodeumFileWithPath, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue NodeumFileWithPath
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/files/{file_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"file_id"+"}", fmt.Sprintf("%v", fileId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v NodeumFileWithPath
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
FilesApiService Displays a specific file.
**API Key Scope**: files / show
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param containerId Numeric ID or name of container.
 * @param fileId Numeric ID of file.

@return NodeumFileWithPath
*/
func (a *FilesApiService) ShowFileByContainer(ctx context.Context, containerId string, fileId int32) (NodeumFileWithPath, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue NodeumFileWithPath
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/containers/{container_id}/files/{file_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"container_id"+"}", fmt.Sprintf("%v", containerId), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"file_id"+"}", fmt.Sprintf("%v", fileId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v NodeumFileWithPath
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
FilesApiService Displays a specific file.
**API Key Scope**: files / show
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param poolId Numeric ID, or name of pool.
 * @param fileId Numeric ID of file.

@return NodeumFileWithPath
*/
func (a *FilesApiService) ShowFileByPool(ctx context.Context, poolId string, fileId int32) (NodeumFileWithPath, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue NodeumFileWithPath
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/pools/{pool_id}/files/{file_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"pool_id"+"}", fmt.Sprintf("%v", poolId), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"file_id"+"}", fmt.Sprintf("%v", fileId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v NodeumFileWithPath
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
FilesApiService Displays a specific file.
**API Key Scope**: files / show
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.
 * @param fileId Numeric ID of file.

@return NodeumFileWithPath
*/
func (a *FilesApiService) ShowFileByTask(ctx context.Context, taskId string, fileId int32) (NodeumFileWithPath, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue NodeumFileWithPath
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/tasks/{task_id}/files/{file_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"task_id"+"}", fmt.Sprintf("%v", taskId), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"file_id"+"}", fmt.Sprintf("%v", fileId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v NodeumFileWithPath
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
FilesApiService Displays a specific file.
**API Key Scope**: files / show
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param taskExecutionId Numeric ID of task execution.
 * @param fileId Numeric ID of file.

@return NodeumFileWithPath
*/
func (a *FilesApiService) ShowFileByTaskExecution(ctx context.Context, taskExecutionId string, fileId int32) (NodeumFileWithPath, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue NodeumFileWithPath
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/task_executions/{task_execution_id}/files/{file_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"task_execution_id"+"}", fmt.Sprintf("%v", taskExecutionId), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"file_id"+"}", fmt.Sprintf("%v", fileId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v NodeumFileWithPath
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
FilesApiService Displays a specific file.
**API Key Scope**: files / show
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param taskId Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.
 * @param taskExecutionId Numeric ID of task execution.
 * @param fileId Numeric ID of file.

@return NodeumFileWithPath
*/
func (a *FilesApiService) ShowFileByTaskExecutionByTask(ctx context.Context, taskId string, taskExecutionId string, fileId int32) (NodeumFileWithPath, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue NodeumFileWithPath
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/tasks/{task_id}/task_executions/{task_execution_id}/files/{file_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"task_id"+"}", fmt.Sprintf("%v", taskId), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"task_execution_id"+"}", fmt.Sprintf("%v", taskExecutionId), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"file_id"+"}", fmt.Sprintf("%v", fileId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v NodeumFileWithPath
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
FilesApiService Displays a specific file on tape of pools, specific for Data Exchange.
**API Key Scope**: import_files / show
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param poolId Numeric ID, or name of pool.
 * @param fileId Numeric ID of file.

@return ImportFileWithPath
*/
func (a *FilesApiService) ShowImportFileByPool(ctx context.Context, poolId string, fileId int32) (ImportFileWithPath, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ImportFileWithPath
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/pools/{pool_id}/import_files/{file_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"pool_id"+"}", fmt.Sprintf("%v", poolId), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"file_id"+"}", fmt.Sprintf("%v", fileId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v ImportFileWithPath
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/* 
FilesApiService Displays a specific file on tape of pools, specific for Active and Offline.
**API Key Scope**: on_tapes_files / show
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param poolId Numeric ID, or name of pool.
 * @param fileId Numeric ID of file.

@return OnTapesFile
*/
func (a *FilesApiService) ShowOnTapeFileByPool(ctx context.Context, poolId string, fileId int32) (OnTapesFile, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue OnTapesFile
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/pools/{pool_id}/on_tapes_files/{file_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"pool_id"+"}", fmt.Sprintf("%v", poolId), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"file_id"+"}", fmt.Sprintf("%v", fileId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v OnTapesFile
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
